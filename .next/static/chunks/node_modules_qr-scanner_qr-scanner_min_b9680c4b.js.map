{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"file":"qr-scanner.min.js","sources":["file:///project/sandbox/user-workspace/node_modules/qr-scanner/src/qr-scanner.ts"],"sourcesContent":["class QrScanner {\n    static readonly DEFAULT_CANVAS_SIZE = 400;\n    static readonly NO_QR_CODE_FOUND = 'No QR code found';\n    private static _disableBarcodeDetector = false;\n    private static _workerMessageId = 0;\n\n    /** @deprecated */\n    static set WORKER_PATH(workerPath: string) {\n        console.warn('Setting QrScanner.WORKER_PATH is not required and not supported anymore. '\n            + 'Have a look at the README for new setup instructions.');\n    }\n\n    static async hasCamera(): Promise<boolean> {\n        try {\n            return !!(await QrScanner.listCameras(false)).length;\n        } catch (e) {\n            return false;\n        }\n    }\n\n    static async listCameras(requestLabels = false): Promise<Array<QrScanner.Camera>> {\n        if (!navigator.mediaDevices) return [];\n\n        const enumerateCameras = async (): Promise<Array<MediaDeviceInfo>> =>\n            (await navigator.mediaDevices.enumerateDevices()).filter((device) => device.kind === 'videoinput');\n\n        // Note that enumerateDevices can always be called and does not prompt the user for permission.\n        // However, enumerateDevices only includes device labels if served via https and an active media stream exists\n        // or permission to access the camera was given. Therefore, if we're not getting labels but labels are requested\n        // ask for camera permission by opening a stream.\n        let openedStream: MediaStream | undefined;\n        try {\n            if (requestLabels && (await enumerateCameras()).every((camera) => !camera.label)) {\n                openedStream = await navigator.mediaDevices.getUserMedia({ audio: false, video: true });\n            }\n        } catch (e) {\n            // Fail gracefully, especially if the device has no camera or on mobile when the camera is already in use\n            // and some browsers disallow a second stream.\n        }\n\n        try {\n            return (await enumerateCameras()).map((camera, i) => ({\n                id: camera.deviceId,\n                label: camera.label || (i === 0 ? 'Default Camera' : `Camera ${i + 1}`),\n            }));\n        } finally {\n            // close the stream we just opened for getting camera access for listing the device labels\n            if (openedStream) {\n                console.warn('Call listCameras after successfully starting a QR scanner to avoid creating '\n                    + 'a temporary video stream');\n                QrScanner._stopVideoStream(openedStream);\n            }\n        }\n    }\n\n    readonly $video: HTMLVideoElement;\n    readonly $canvas: HTMLCanvasElement;\n    readonly $overlay?: HTMLDivElement;\n    private readonly $codeOutlineHighlight?: SVGSVGElement;\n    private readonly _onDecode?: (result: QrScanner.ScanResult) => void;\n    private readonly _legacyOnDecode?: (result: string) => void;\n    private readonly _legacyCanvasSize: number = QrScanner.DEFAULT_CANVAS_SIZE;\n    private _preferredCamera: QrScanner.FacingMode | QrScanner.DeviceId = 'environment';\n    private readonly _maxScansPerSecond: number = 25;\n    private _lastScanTimestamp: number = -1;\n    private _scanRegion: QrScanner.ScanRegion;\n    private _codeOutlineHighlightRemovalTimeout?: number;\n    private _qrEnginePromise: Promise<Worker | BarcodeDetector>\n    private _active: boolean = false;\n    private _paused: boolean = false;\n    private _flashOn: boolean = false;\n    private _destroyed: boolean = false;\n\n    constructor(\n        video: HTMLVideoElement,\n        onDecode: (result: QrScanner.ScanResult) => void,\n        options: {\n            onDecodeError?: (error: Error | string) => void,\n            calculateScanRegion?: (video: HTMLVideoElement) => QrScanner.ScanRegion,\n            preferredCamera?: QrScanner.FacingMode | QrScanner.DeviceId,\n            maxScansPerSecond?: number;\n            highlightScanRegion?: boolean,\n            highlightCodeOutline?: boolean,\n            overlay?: HTMLDivElement,\n            /** just a temporary flag until we switch entirely to the new api */\n            returnDetailedScanResult?: true,\n        },\n    );\n    /** @deprecated */\n    constructor(\n        video: HTMLVideoElement,\n        onDecode: (result: string) => void,\n        onDecodeError?: (error: Error | string) => void,\n        calculateScanRegion?: (video: HTMLVideoElement) => QrScanner.ScanRegion,\n        preferredCamera?: QrScanner.FacingMode | QrScanner.DeviceId,\n    );\n    /** @deprecated */\n    constructor(\n        video: HTMLVideoElement,\n        onDecode: (result: string) => void,\n        onDecodeError?: (error: Error | string) => void,\n        canvasSize?: number,\n        preferredCamera?: QrScanner.FacingMode | QrScanner.DeviceId,\n    );\n    /** @deprecated */\n    constructor(video: HTMLVideoElement, onDecode: (result: string) => void, canvasSize?: number);\n    constructor(\n        video: HTMLVideoElement,\n        onDecode: ((result: QrScanner.ScanResult) => void) | ((result: string) => void),\n        canvasSizeOrOnDecodeErrorOrOptions?: number | ((error: Error | string) => void) | {\n            onDecodeError?: (error: Error | string) => void,\n            calculateScanRegion?: (video: HTMLVideoElement) => QrScanner.ScanRegion,\n            preferredCamera?: QrScanner.FacingMode | QrScanner.DeviceId,\n            maxScansPerSecond?: number;\n            highlightScanRegion?: boolean,\n            highlightCodeOutline?: boolean,\n            overlay?: HTMLDivElement,\n            /** just a temporary flag until we switch entirely to the new api */\n            returnDetailedScanResult?: true,\n        },\n        canvasSizeOrCalculateScanRegion?: number | ((video: HTMLVideoElement) => QrScanner.ScanRegion),\n        preferredCamera?: QrScanner.FacingMode | QrScanner.DeviceId,\n    ) {\n        this.$video = video;\n        this.$canvas = document.createElement('canvas');\n\n        if (canvasSizeOrOnDecodeErrorOrOptions && typeof canvasSizeOrOnDecodeErrorOrOptions === 'object') {\n            // we got an options object using the new api\n            this._onDecode = onDecode as QrScanner['_onDecode'];\n        } else {\n            if (canvasSizeOrOnDecodeErrorOrOptions || canvasSizeOrCalculateScanRegion || preferredCamera) {\n                console.warn('You\\'re using a deprecated version of the QrScanner constructor which will be removed in '\n                    + 'the future');\n            } else {\n                // Only video and onDecode were specified and we can't distinguish between new or old api usage. For\n                // backwards compatibility we have to assume the old api for now. The options object is marked as non-\n                // optional in the parameter list above to make clear that ScanResult instead of string is only passed\n                // if an options object was provided. However, in the future once legacy support is removed, the options\n                // object should become optional.\n                console.warn('Note that the type of the scan result passed to onDecode will change in the future. '\n                    + 'To already switch to the new api today, you can pass returnDetailedScanResult: true.');\n            }\n            this._legacyOnDecode = onDecode as QrScanner['_legacyOnDecode'];\n        }\n\n        const options = typeof canvasSizeOrOnDecodeErrorOrOptions === 'object'\n            ? canvasSizeOrOnDecodeErrorOrOptions\n            : {};\n        this._onDecodeError = options.onDecodeError || (typeof canvasSizeOrOnDecodeErrorOrOptions === 'function'\n            ? canvasSizeOrOnDecodeErrorOrOptions\n            : this._onDecodeError);\n        this._calculateScanRegion = options.calculateScanRegion || (typeof canvasSizeOrCalculateScanRegion==='function'\n            ? canvasSizeOrCalculateScanRegion\n            : this._calculateScanRegion);\n        this._preferredCamera = options.preferredCamera || preferredCamera || this._preferredCamera;\n        this._legacyCanvasSize = typeof canvasSizeOrOnDecodeErrorOrOptions === 'number'\n            ? canvasSizeOrOnDecodeErrorOrOptions\n            : typeof canvasSizeOrCalculateScanRegion === 'number'\n                ? canvasSizeOrCalculateScanRegion\n                : this._legacyCanvasSize;\n        this._maxScansPerSecond = options.maxScansPerSecond || this._maxScansPerSecond;\n\n        this._onPlay = this._onPlay.bind(this);\n        this._onLoadedMetaData = this._onLoadedMetaData.bind(this);\n        this._onVisibilityChange = this._onVisibilityChange.bind(this);\n        this._updateOverlay = this._updateOverlay.bind(this);\n\n        // @ts-ignore\n        video.disablePictureInPicture = true;\n        // Allow inline playback on iPhone instead of requiring full screen playback,\n        // see https://webkit.org/blog/6784/new-video-policies-for-ios/\n        // @ts-ignore\n        video.playsInline = true;\n        // Allow play() on iPhone without requiring a user gesture. Should not really be needed as camera stream\n        // includes no audio, but just to be safe.\n        video.muted = true;\n\n        // Avoid Safari stopping the video stream on a hidden video.\n        // See https://github.com/cozmo/jsQR/issues/185\n        let shouldHideVideo = false;\n        if (video.hidden) {\n            video.hidden = false;\n            shouldHideVideo = true;\n        }\n        if (!document.body.contains(video)) {\n            document.body.appendChild(video);\n            shouldHideVideo = true;\n        }\n        const videoContainer = video.parentElement!;\n\n        if (options.highlightScanRegion || options.highlightCodeOutline) {\n            const gotExternalOverlay = !!options.overlay;\n            this.$overlay = options.overlay || document.createElement('div');\n            const overlayStyle = this.$overlay.style;\n            overlayStyle.position = 'absolute';\n            overlayStyle.display = 'none';\n            overlayStyle.pointerEvents = 'none';\n            this.$overlay.classList.add('scan-region-highlight');\n            if (!gotExternalOverlay && options.highlightScanRegion) {\n                // default style; can be overwritten via css, e.g. by changing the svg's stroke color, hiding the\n                // .scan-region-highlight-svg, setting a border, outline, background, etc.\n                this.$overlay.innerHTML = '<svg class=\"scan-region-highlight-svg\" viewBox=\"0 0 238 238\" '\n                    + 'preserveAspectRatio=\"none\" style=\"position:absolute;width:100%;height:100%;left:0;top:0;'\n                    + 'fill:none;stroke:#e9b213;stroke-width:4;stroke-linecap:round;stroke-linejoin:round\">'\n                    + '<path d=\"M31 2H10a8 8 0 0 0-8 8v21M207 2h21a8 8 0 0 1 8 8v21m0 176v21a8 8 0 0 1-8 8h-21m-176 '\n                    + '0H10a8 8 0 0 1-8-8v-21\"/></svg>';\n                try {\n                    this.$overlay.firstElementChild!.animate({ transform: ['scale(.98)', 'scale(1.01)'] }, {\n                        duration: 400,\n                        iterations: Infinity,\n                        direction: 'alternate',\n                        easing: 'ease-in-out',\n                    });\n                } catch (e) {}\n                videoContainer.insertBefore(this.$overlay, this.$video.nextSibling);\n            }\n            if (options.highlightCodeOutline) {\n                // default style; can be overwritten via css\n                this.$overlay.insertAdjacentHTML(\n                    'beforeend',\n                    '<svg class=\"code-outline-highlight\" preserveAspectRatio=\"none\" style=\"display:none;width:100%;'\n                        + 'height:100%;fill:none;stroke:#e9b213;stroke-width:5;stroke-dasharray:25;'\n                        + 'stroke-linecap:round;stroke-linejoin:round\"><polygon/></svg>',\n                );\n                this.$codeOutlineHighlight = this.$overlay.lastElementChild as SVGSVGElement;\n            }\n        }\n        this._scanRegion = this._calculateScanRegion(video);\n\n        requestAnimationFrame(() => {\n            // Checking in requestAnimationFrame which should avoid a potential additional re-flow for getComputedStyle.\n            const videoStyle = window.getComputedStyle(video);\n            if (videoStyle.display === 'none') {\n                video.style.setProperty('display', 'block', 'important');\n                shouldHideVideo = true;\n            }\n            if (videoStyle.visibility !== 'visible') {\n                video.style.setProperty('visibility', 'visible', 'important');\n                shouldHideVideo = true;\n            }\n            if (shouldHideVideo) {\n                // Hide the video in a way that doesn't cause Safari to stop the playback.\n                console.warn('QrScanner has overwritten the video hiding style to avoid Safari stopping the playback.');\n                video.style.opacity = '0';\n                video.style.width = '0';\n                video.style.height = '0';\n                if (this.$overlay && this.$overlay.parentElement) {\n                    this.$overlay.parentElement.removeChild(this.$overlay);\n                }\n                // @ts-ignore\n                delete this.$overlay!;\n                // @ts-ignore\n                delete this.$codeOutlineHighlight!;\n            }\n\n            if (this.$overlay) {\n                this._updateOverlay();\n            }\n        });\n\n        video.addEventListener('play', this._onPlay);\n        video.addEventListener('loadedmetadata', this._onLoadedMetaData);\n        document.addEventListener('visibilitychange', this._onVisibilityChange);\n        window.addEventListener('resize', this._updateOverlay);\n\n        this._qrEnginePromise = QrScanner.createQrEngine();\n    }\n\n    async hasFlash(): Promise<boolean> {\n        let stream: MediaStream | undefined;\n        try {\n            if (this.$video.srcObject) {\n                if (!(this.$video.srcObject instanceof MediaStream)) return false; // srcObject is not a camera stream\n                stream = this.$video.srcObject;\n            } else {\n                stream = (await this._getCameraStream()).stream;\n            }\n            return 'torch' in stream.getVideoTracks()[0].getSettings();\n        } catch (e) {\n            return false;\n        } finally {\n            // close the stream we just opened for detecting whether it supports flash\n            if (stream && stream !== this.$video.srcObject) {\n                console.warn('Call hasFlash after successfully starting the scanner to avoid creating '\n                    + 'a temporary video stream');\n                QrScanner._stopVideoStream(stream);\n            }\n        }\n    }\n\n    isFlashOn(): boolean {\n        return this._flashOn;\n    }\n\n    async toggleFlash(): Promise<void> {\n        if (this._flashOn) {\n            await this.turnFlashOff();\n        } else {\n            await this.turnFlashOn();\n        }\n    }\n\n    async turnFlashOn(): Promise<void> {\n        if (this._flashOn || this._destroyed) return;\n        this._flashOn = true;\n        if (!this._active || this._paused) return; // flash will be turned on later on .start()\n        try {\n            if (!await this.hasFlash()) throw 'No flash available';\n            // Note that the video track is guaranteed to exist and to be a MediaStream due to the check in hasFlash\n            await (this.$video.srcObject as MediaStream).getVideoTracks()[0].applyConstraints({\n                // @ts-ignore: constraint 'torch' is unknown to ts\n                advanced: [{ torch: true }],\n            });\n        } catch (e) {\n            this._flashOn = false;\n            throw e;\n        }\n    }\n\n    async turnFlashOff(): Promise<void> {\n        if (!this._flashOn) return;\n        // applyConstraints with torch: false does not work to turn the flashlight off, as a stream's torch stays\n        // continuously on, see https://developer.mozilla.org/en-US/docs/Web/API/MediaTrackConstraints#torch. Therefore,\n        // we have to stop the stream to turn the flashlight off.\n        this._flashOn = false;\n        await this._restartVideoStream();\n    }\n\n    destroy(): void {\n        this.$video.removeEventListener('loadedmetadata', this._onLoadedMetaData);\n        this.$video.removeEventListener('play', this._onPlay);\n        document.removeEventListener('visibilitychange', this._onVisibilityChange);\n        window.removeEventListener('resize', this._updateOverlay);\n\n        this._destroyed = true;\n        this._flashOn = false;\n        this.stop(); // sets this._paused = true and this._active = false\n        QrScanner._postWorkerMessage(this._qrEnginePromise, 'close');\n    }\n\n    async start(): Promise<void> {\n        if (this._destroyed) throw new Error('The QR scanner can not be started as it had been destroyed.');\n        if (this._active && !this._paused) return;\n\n        if (window.location.protocol !== 'https:') {\n            // warn but try starting the camera anyways\n            console.warn('The camera stream is only accessible if the page is transferred via https.');\n        }\n\n        this._active = true;\n        if (document.hidden) return; // camera will be started as soon as tab is in foreground\n        this._paused = false;\n        if (this.$video.srcObject) {\n            // camera stream already/still set\n            await this.$video.play();\n            return;\n        }\n\n        try {\n            const { stream, facingMode } = await this._getCameraStream();\n            if (!this._active || this._paused) {\n                // was stopped in the meantime\n                QrScanner._stopVideoStream(stream);\n                return;\n            }\n            this._setVideoMirror(facingMode);\n            this.$video.srcObject = stream;\n            await this.$video.play();\n\n            // Restart the flash if it was previously on\n            if (this._flashOn) {\n                this._flashOn = false; // force turnFlashOn to restart the flash\n                this.turnFlashOn().catch(() => {});\n            }\n        } catch (e) {\n            if (this._paused) return;\n            this._active = false;\n            throw e;\n        }\n    }\n\n    stop(): void {\n        this.pause();\n        this._active = false;\n    }\n\n    async pause(stopStreamImmediately = false): Promise<boolean> {\n        this._paused = true;\n        if (!this._active) return true;\n        this.$video.pause();\n\n        if (this.$overlay) {\n            this.$overlay.style.display = 'none';\n        }\n\n        const stopStream = () => {\n            if (this.$video.srcObject instanceof MediaStream) {\n                // revoke srcObject only if it's a stream which was likely set by us\n                QrScanner._stopVideoStream(this.$video.srcObject);\n                this.$video.srcObject = null;\n            }\n        };\n\n        if (stopStreamImmediately) {\n            stopStream();\n            return true;\n        }\n\n        await new Promise((resolve) => setTimeout(resolve, 300));\n        if (!this._paused) return false;\n        stopStream();\n        return true;\n    }\n\n    async setCamera(facingModeOrDeviceId: QrScanner.FacingMode | QrScanner.DeviceId): Promise<void> {\n        if (facingModeOrDeviceId === this._preferredCamera) return;\n        this._preferredCamera = facingModeOrDeviceId;\n        // Restart the scanner with the new camera which will also update the video mirror and the scan region.\n        await this._restartVideoStream();\n    }\n\n    static async scanImage(\n        imageOrFileOrBlobOrUrl: HTMLImageElement | HTMLVideoElement | HTMLCanvasElement | OffscreenCanvas | ImageBitmap\n            | SVGImageElement | File | Blob | URL | String,\n        options: {\n            scanRegion?: QrScanner.ScanRegion | null,\n            qrEngine?: Worker | BarcodeDetector | Promise<Worker | BarcodeDetector> | null,\n            canvas?: HTMLCanvasElement | null,\n            disallowCanvasResizing?: boolean,\n            alsoTryWithoutScanRegion?: boolean,\n            /** just a temporary flag until we switch entirely to the new api */\n            returnDetailedScanResult?: true,\n        },\n    ): Promise<QrScanner.ScanResult>;\n    /** @deprecated */\n    static async scanImage(\n        imageOrFileOrBlobOrUrl: HTMLImageElement | HTMLVideoElement | HTMLCanvasElement | OffscreenCanvas | ImageBitmap\n            | SVGImageElement | File | Blob | URL | String,\n        scanRegion?: QrScanner.ScanRegion | null,\n        qrEngine?: Worker | BarcodeDetector | Promise<Worker | BarcodeDetector> | null,\n        canvas?: HTMLCanvasElement | null,\n        disallowCanvasResizing?: boolean,\n        alsoTryWithoutScanRegion?: boolean,\n    ): Promise<string>;\n    static async scanImage(\n        imageOrFileOrBlobOrUrl: HTMLImageElement | HTMLVideoElement | HTMLCanvasElement | OffscreenCanvas | ImageBitmap\n            | SVGImageElement | File | Blob | URL | String,\n        scanRegionOrOptions?: QrScanner.ScanRegion | {\n            scanRegion?: QrScanner.ScanRegion | null,\n            qrEngine?: Worker | BarcodeDetector | Promise<Worker | BarcodeDetector> | null,\n            canvas?: HTMLCanvasElement | null,\n            disallowCanvasResizing?: boolean,\n            alsoTryWithoutScanRegion?: boolean,\n            /** just a temporary flag until we switch entirely to the new api */\n            returnDetailedScanResult?: true,\n        } | null,\n        qrEngine?: Worker | BarcodeDetector | Promise<Worker | BarcodeDetector> | null,\n        canvas?: HTMLCanvasElement | null,\n        disallowCanvasResizing: boolean = false,\n        alsoTryWithoutScanRegion: boolean = false,\n    ): Promise<string | QrScanner.ScanResult> {\n        let scanRegion: QrScanner.ScanRegion | null | undefined;\n        let returnDetailedScanResult = false;\n        if (scanRegionOrOptions && (\n            'scanRegion' in scanRegionOrOptions\n            || 'qrEngine' in scanRegionOrOptions\n            || 'canvas' in scanRegionOrOptions\n            || 'disallowCanvasResizing' in scanRegionOrOptions\n            || 'alsoTryWithoutScanRegion' in scanRegionOrOptions\n            || 'returnDetailedScanResult' in scanRegionOrOptions\n        )) {\n            // we got an options object using the new api\n            scanRegion = scanRegionOrOptions.scanRegion;\n            qrEngine = scanRegionOrOptions.qrEngine;\n            canvas = scanRegionOrOptions.canvas;\n            disallowCanvasResizing = scanRegionOrOptions.disallowCanvasResizing || false;\n            alsoTryWithoutScanRegion = scanRegionOrOptions.alsoTryWithoutScanRegion || false;\n            returnDetailedScanResult = true;\n        } else if (scanRegionOrOptions || qrEngine || canvas || disallowCanvasResizing || alsoTryWithoutScanRegion) {\n            console.warn('You\\'re using a deprecated api for scanImage which will be removed in the future.');\n        } else {\n            // Only imageOrFileOrBlobOrUrl was specified and we can't distinguish between new or old api usage. For\n            // backwards compatibility we have to assume the old api for now. The options object is marked as non-\n            // optional in the parameter list above to make clear that ScanResult instead of string is only returned if\n            // an options object was provided. However, in the future once legacy support is removed, the options object\n            // should become optional.\n            console.warn('Note that the return type of scanImage will change in the future. To already switch to the '\n                + 'new api today, you can pass returnDetailedScanResult: true.');\n        }\n\n        const gotExternalEngine = !!qrEngine;\n\n        try {\n            let image: HTMLImageElement | HTMLVideoElement | HTMLCanvasElement | OffscreenCanvas | ImageBitmap\n                | SVGImageElement;\n            let canvasContext: CanvasRenderingContext2D;\n            [qrEngine, image] = await Promise.all([\n                qrEngine || QrScanner.createQrEngine(),\n                QrScanner._loadImage(imageOrFileOrBlobOrUrl),\n            ]);\n            [canvas, canvasContext] = QrScanner._drawToCanvas(image, scanRegion, canvas, disallowCanvasResizing);\n            let detailedScanResult: QrScanner.ScanResult;\n\n            if (qrEngine instanceof Worker) {\n                const qrEngineWorker = qrEngine; // for ts to know that it's still a worker later in the event listeners\n                if (!gotExternalEngine) {\n                    // Enable scanning of inverted color qr codes.\n                    QrScanner._postWorkerMessageSync(qrEngineWorker, 'inversionMode', 'both');\n                }\n                detailedScanResult = await new Promise((resolve, reject) => {\n                    let timeout: number;\n                    let onMessage: (event: MessageEvent) => void;\n                    let onError: (error: ErrorEvent | string) => void;\n                    let expectedResponseId = -1;\n                    onMessage = (event: MessageEvent) => {\n                        if (event.data.id !== expectedResponseId) {\n                            return;\n                        }\n                        qrEngineWorker.removeEventListener('message', onMessage);\n                        qrEngineWorker.removeEventListener('error', onError);\n                        clearTimeout(timeout);\n                        if (event.data.data !== null) {\n                            resolve({\n                                data: event.data.data,\n                                cornerPoints: QrScanner._convertPoints(event.data.cornerPoints, scanRegion),\n                            });\n                        } else {\n                            reject(QrScanner.NO_QR_CODE_FOUND);\n                        }\n                    };\n                    onError = (error: ErrorEvent | string) => {\n                        qrEngineWorker.removeEventListener('message', onMessage);\n                        qrEngineWorker.removeEventListener('error', onError);\n                        clearTimeout(timeout);\n                        const errorMessage = !error ? 'Unknown Error' : ((error as ErrorEvent).message || error);\n                        reject('Scanner error: ' + errorMessage);\n                    };\n                    qrEngineWorker.addEventListener('message', onMessage);\n                    qrEngineWorker.addEventListener('error', onError);\n                    timeout = setTimeout(() => onError('timeout'), 10000);\n                    const imageData = canvasContext.getImageData(0, 0, canvas!.width, canvas!.height);\n                    expectedResponseId = QrScanner._postWorkerMessageSync(\n                        qrEngineWorker,\n                        'decode',\n                        imageData,\n                        [imageData.data.buffer],\n                    );\n                });\n            } else {\n                detailedScanResult = await Promise.race([\n                    new Promise<QrScanner.ScanResult>((resolve, reject) => window.setTimeout(\n                        () => reject('Scanner error: timeout'),\n                        10000,\n                    )),\n                    (async (): Promise<QrScanner.ScanResult> => {\n                        try {\n                            const [scanResult] = await qrEngine.detect(canvas!);\n                            if (!scanResult) throw QrScanner.NO_QR_CODE_FOUND;\n                            return {\n                                data: scanResult.rawValue,\n                                cornerPoints: QrScanner._convertPoints(scanResult.cornerPoints, scanRegion),\n                            };\n                        } catch (e) {\n                            const errorMessage = (e as Error).message || e as string;\n                            if (/not implemented|service unavailable/.test(errorMessage)) {\n                                // Not implemented can apparently for some reason happen even though getSupportedFormats\n                                // in createQrScanner reported that it's supported, see issue #98.\n                                // Service unavailable can happen after some time when the BarcodeDetector crashed and\n                                // can theoretically be recovered from by creating a new BarcodeDetector. However, in\n                                // newer browsers this issue does not seem to be present anymore and therefore we do not\n                                // apply this optimization anymore but just set _disableBarcodeDetector in both cases.\n                                // Also note that if we got an external qrEngine that crashed, we should possibly notify\n                                // the caller about it, but we also don't do this here, as it's such an unlikely case.\n                                QrScanner._disableBarcodeDetector = true;\n                                // retry without passing the broken BarcodeScanner instance\n                                return QrScanner.scanImage(imageOrFileOrBlobOrUrl, {\n                                    scanRegion,\n                                    canvas,\n                                    disallowCanvasResizing,\n                                    alsoTryWithoutScanRegion,\n                                });\n                            }\n                            throw `Scanner error: ${errorMessage}`;\n                        }\n                    })(),\n                ]);\n            }\n            return returnDetailedScanResult ? detailedScanResult : detailedScanResult.data;\n        } catch (e) {\n            if (!scanRegion || !alsoTryWithoutScanRegion) throw e;\n            const detailedScanResult = await QrScanner.scanImage(\n                imageOrFileOrBlobOrUrl,\n                { qrEngine, canvas, disallowCanvasResizing },\n            );\n            return returnDetailedScanResult ? detailedScanResult : detailedScanResult.data;\n        } finally {\n            if (!gotExternalEngine) {\n                QrScanner._postWorkerMessage(qrEngine!, 'close');\n            }\n        }\n    }\n\n    setGrayscaleWeights(red: number, green: number, blue: number, useIntegerApproximation: boolean = true): void {\n        // Note that for the native BarcodeDecoder or if the worker was destroyed, this is a no-op. However, the native\n        // implementations work also well with colored qr codes.\n        QrScanner._postWorkerMessage(\n            this._qrEnginePromise,\n            'grayscaleWeights',\n            { red, green, blue, useIntegerApproximation }\n        );\n    }\n\n    setInversionMode(inversionMode: QrScanner.InversionMode): void {\n        // Note that for the native BarcodeDecoder or if the worker was destroyed, this is a no-op. However, the native\n        // implementations scan normal and inverted qr codes by default\n        QrScanner._postWorkerMessage(this._qrEnginePromise, 'inversionMode', inversionMode);\n    }\n\n    static async createQrEngine(): Promise<Worker | BarcodeDetector>;\n    /** @deprecated */\n    static async createQrEngine(workerPath: string): Promise<Worker | BarcodeDetector>;\n    static async createQrEngine(workerPath?: string): Promise<Worker | BarcodeDetector> {\n        if (workerPath) {\n            console.warn('Specifying a worker path is not required and not supported anymore.');\n        }\n\n        // @ts-ignore no types defined for import\n        const createWorker = () => (import('./qr-scanner-worker.min.js') as Promise<{ createWorker: () => Worker }>)\n            .then((module) => module.createWorker());\n\n        const useBarcodeDetector = !QrScanner._disableBarcodeDetector\n            && 'BarcodeDetector' in window\n            && BarcodeDetector.getSupportedFormats\n            && (await BarcodeDetector.getSupportedFormats()).includes('qr_code');\n\n        if (!useBarcodeDetector) return createWorker();\n\n        // On Macs with an M1/M2 processor and macOS Ventura (macOS version 13), the BarcodeDetector is broken in\n        // Chromium based browsers, regardless of the version. For that constellation, the BarcodeDetector does not\n        // error but does not detect QR codes. Macs without an M1/M2 or before Ventura are fine.\n        // See issue #209 and https://bugs.chromium.org/p/chromium/issues/detail?id=1382442\n        // TODO update this once the issue in macOS is fixed\n        const userAgentData = navigator.userAgentData;\n        const isChromiumOnMacWithArmVentura = userAgentData // all Chromium browsers support userAgentData\n            && userAgentData.brands.some(({ brand }) => /Chromium/i.test(brand))\n            && /mac ?OS/i.test(userAgentData.platform)\n            // Does it have an ARM chip (e.g. M1/M2) and Ventura? Check this last as getHighEntropyValues can\n            // theoretically trigger a browser prompt, although no browser currently does seem to show one.\n            // If browser or user refused to return the requested values, assume broken ARM Ventura, to be safe.\n            && await userAgentData.getHighEntropyValues(['architecture', 'platformVersion'])\n                .then(({ architecture, platformVersion }) =>\n                    /arm/i.test(architecture || 'arm') && parseInt(platformVersion || '13') >= /* Ventura */ 13)\n                .catch(() => true);\n        if (isChromiumOnMacWithArmVentura) return createWorker();\n\n        return new BarcodeDetector({ formats: ['qr_code'] });\n    }\n\n    private _onPlay(): void {\n        this._scanRegion = this._calculateScanRegion(this.$video);\n        this._updateOverlay();\n        if (this.$overlay) {\n            this.$overlay.style.display = '';\n        }\n        this._scanFrame();\n    }\n\n    private _onLoadedMetaData(): void {\n        this._scanRegion = this._calculateScanRegion(this.$video);\n        this._updateOverlay();\n    }\n\n    private _onVisibilityChange(): void {\n        if (document.hidden) {\n            this.pause();\n        } else if (this._active) {\n            this.start();\n        }\n    }\n\n    private _calculateScanRegion(video: HTMLVideoElement): QrScanner.ScanRegion {\n        // Default scan region calculation. Note that this can be overwritten in the constructor.\n        const smallestDimension = Math.min(video.videoWidth, video.videoHeight);\n        const scanRegionSize = Math.round(2 / 3 * smallestDimension);\n        return {\n            x: Math.round((video.videoWidth - scanRegionSize) / 2),\n            y: Math.round((video.videoHeight - scanRegionSize) / 2),\n            width: scanRegionSize,\n            height: scanRegionSize,\n            downScaledWidth: this._legacyCanvasSize,\n            downScaledHeight: this._legacyCanvasSize,\n        };\n    }\n\n    private _updateOverlay(): void {\n        requestAnimationFrame(() => {\n            // Running in requestAnimationFrame which should avoid a potential additional re-flow for getComputedStyle\n            // and offsetWidth, offsetHeight, offsetLeft, offsetTop.\n            if (!this.$overlay) return;\n            const video = this.$video;\n            const videoWidth = video.videoWidth;\n            const videoHeight = video.videoHeight;\n            const elementWidth = video.offsetWidth;\n            const elementHeight = video.offsetHeight;\n            const elementX = video.offsetLeft;\n            const elementY = video.offsetTop;\n\n            const videoStyle = window.getComputedStyle(video);\n            const videoObjectFit = videoStyle.objectFit;\n            const videoAspectRatio = videoWidth / videoHeight;\n            const elementAspectRatio = elementWidth / elementHeight;\n            let videoScaledWidth: number;\n            let videoScaledHeight: number;\n            switch (videoObjectFit) {\n                case 'none':\n                    videoScaledWidth = videoWidth;\n                    videoScaledHeight = videoHeight;\n                    break;\n                case 'fill':\n                    videoScaledWidth = elementWidth;\n                    videoScaledHeight = elementHeight;\n                    break;\n                default: // 'cover', 'contains', 'scale-down'\n                    if (videoObjectFit === 'cover'\n                        ? videoAspectRatio > elementAspectRatio\n                        : videoAspectRatio < elementAspectRatio) {\n                        // The scaled height is the element height\n                        // - for 'cover' if the video aspect ratio is wider than the element aspect ratio\n                        //   (scaled height matches element height and scaled width overflows element width)\n                        // - for 'contains'/'scale-down' if element aspect ratio is wider than the video aspect ratio\n                        //   (scaled height matched element height and element width overflows scaled width)\n                        videoScaledHeight = elementHeight;\n                        videoScaledWidth = videoScaledHeight * videoAspectRatio;\n                    } else {\n                        videoScaledWidth = elementWidth;\n                        videoScaledHeight = videoScaledWidth / videoAspectRatio;\n                    }\n                    if (videoObjectFit === 'scale-down') {\n                        // for 'scale-down' the dimensions are the minimum of 'contains' and 'none'\n                        videoScaledWidth = Math.min(videoScaledWidth, videoWidth);\n                        videoScaledHeight = Math.min(videoScaledHeight, videoHeight);\n                    }\n            }\n\n            // getComputedStyle is so nice to convert keywords (left, center, right, top, bottom) to percent and makes\n            // sure to set the default of 50% if only one or no component was provided, therefore we can be sure that\n            // both components are set. Additionally, it converts units other than px (e.g. rem) to px.\n            const [videoX, videoY] = videoStyle.objectPosition.split(' ').map((length, i) => {\n                const lengthValue = parseFloat(length);\n                return length.endsWith('%')\n                    ? (!i ? elementWidth - videoScaledWidth : elementHeight - videoScaledHeight) * lengthValue / 100\n                    : lengthValue;\n            });\n\n            const regionWidth = this._scanRegion.width || videoWidth;\n            const regionHeight = this._scanRegion.height || videoHeight;\n            const regionX = this._scanRegion.x || 0;\n            const regionY = this._scanRegion.y || 0;\n\n            const overlayStyle = this.$overlay.style;\n            overlayStyle.width = `${regionWidth / videoWidth * videoScaledWidth}px`;\n            overlayStyle.height = `${regionHeight / videoHeight * videoScaledHeight}px`;\n            overlayStyle.top = `${elementY + videoY + regionY / videoHeight * videoScaledHeight}px`;\n            const isVideoMirrored = /scaleX\\(-1\\)/.test(video.style.transform!);\n            overlayStyle.left = `${elementX\n                + (isVideoMirrored ? elementWidth - videoX - videoScaledWidth : videoX)\n                + (isVideoMirrored ? videoWidth - regionX - regionWidth : regionX) / videoWidth * videoScaledWidth}px`;\n            // apply same mirror as on video\n            overlayStyle.transform = video.style.transform;\n        });\n    }\n\n    private static _convertPoints(\n        points: QrScanner.Point[],\n        scanRegion?: QrScanner.ScanRegion | null,\n    ): QrScanner.Point[] {\n        if (!scanRegion) return points;\n        const offsetX = scanRegion.x || 0;\n        const offsetY = scanRegion.y || 0;\n        const scaleFactorX = scanRegion.width && scanRegion.downScaledWidth\n            ? scanRegion.width / scanRegion.downScaledWidth\n            : 1;\n        const scaleFactorY = scanRegion.height && scanRegion.downScaledHeight\n            ? scanRegion.height / scanRegion.downScaledHeight\n            : 1;\n        for (const point of points) {\n            point.x = point.x * scaleFactorX + offsetX;\n            point.y = point.y * scaleFactorY + offsetY;\n        }\n        return points;\n    }\n\n    private _scanFrame(): void {\n        if (!this._active || this.$video.paused || this.$video.ended) return;\n        // If requestVideoFrameCallback is available use that to avoid unnecessary scans on the same frame as the\n        // camera's framerate can be lower than the screen refresh rate and this._maxScansPerSecond, especially in dark\n        // settings where the exposure time is longer. Both, requestVideoFrameCallback and requestAnimationFrame are not\n        // being fired if the tab is in the background, which is what we want.\n        const requestFrame = 'requestVideoFrameCallback' in this.$video\n            // @ts-ignore\n            ? this.$video.requestVideoFrameCallback.bind(this.$video)\n            : requestAnimationFrame;\n        requestFrame(async () => {\n            if (this.$video.readyState <= 1) {\n                // Skip scans until the video is ready as drawImage() only works correctly on a video with readyState\n                // > 1, see https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/drawImage#Notes.\n                // This also avoids false positives for videos paused after a successful scan which remains visible on\n                // the canvas until the video is started again and ready.\n                this._scanFrame();\n                return;\n            }\n\n            const timeSinceLastScan = Date.now() - this._lastScanTimestamp;\n            const minimumTimeBetweenScans = 1000 / this._maxScansPerSecond;\n            if (timeSinceLastScan < minimumTimeBetweenScans) {\n                await new Promise((resolve) => setTimeout(resolve, minimumTimeBetweenScans - timeSinceLastScan));\n            }\n            // console.log('Scan rate:', Math.round(1000 / (Date.now() - this._lastScanTimestamp)));\n            this._lastScanTimestamp = Date.now();\n\n            let result: QrScanner.ScanResult | undefined;\n            try {\n                result = await QrScanner.scanImage(this.$video, {\n                    scanRegion: this._scanRegion,\n                    qrEngine: this._qrEnginePromise,\n                    canvas: this.$canvas,\n                });\n            } catch (error) {\n                if (!this._active) return;\n                this._onDecodeError(error as Error | string);\n            }\n\n            if (QrScanner._disableBarcodeDetector && !(await this._qrEnginePromise instanceof Worker)) {\n                // replace the disabled BarcodeDetector\n                this._qrEnginePromise = QrScanner.createQrEngine();\n            }\n\n            if (result) {\n                if (this._onDecode) {\n                    this._onDecode(result);\n                } else if (this._legacyOnDecode) {\n                    this._legacyOnDecode(result.data);\n                }\n\n                if (this.$codeOutlineHighlight) {\n                    clearTimeout(this._codeOutlineHighlightRemovalTimeout);\n                    this._codeOutlineHighlightRemovalTimeout = undefined;\n                    this.$codeOutlineHighlight.setAttribute(\n                        'viewBox',\n                        `${this._scanRegion.x || 0} `\n                            + `${this._scanRegion.y || 0} `\n                            + `${this._scanRegion.width || this.$video.videoWidth} `\n                            + `${this._scanRegion.height || this.$video.videoHeight}`,\n                    );\n                    const polygon = this.$codeOutlineHighlight.firstElementChild!;\n                    polygon.setAttribute('points', result.cornerPoints.map(({x, y}) => `${x},${y}`).join(' '));\n                    this.$codeOutlineHighlight.style.display = '';\n                }\n            } else if (this.$codeOutlineHighlight && !this._codeOutlineHighlightRemovalTimeout) {\n                // hide after timeout to make it flash less when on some frames the QR code is detected and on some not\n                this._codeOutlineHighlightRemovalTimeout = setTimeout(\n                    () => this.$codeOutlineHighlight!.style.display = 'none',\n                    100,\n                );\n            }\n\n            this._scanFrame();\n        });\n    }\n\n    private _onDecodeError(error: Error | string): void {\n        // default error handler; can be overwritten in the constructor\n        if (error === QrScanner.NO_QR_CODE_FOUND) return;\n        console.log(error);\n    }\n\n    private async _getCameraStream(): Promise<{ stream: MediaStream, facingMode: QrScanner.FacingMode }> {\n        if (!navigator.mediaDevices) throw 'Camera not found.';\n\n        const preferenceType = /^(environment|user)$/.test(this._preferredCamera)\n            ? 'facingMode'\n            : 'deviceId';\n        const constraintsWithoutCamera: Array<MediaTrackConstraints> = [{\n            width: { min: 1024 }\n        }, {\n            width: { min: 768 }\n        }, {}];\n        const constraintsWithCamera = constraintsWithoutCamera.map((constraint) => Object.assign({}, constraint, {\n            [preferenceType]: { exact: this._preferredCamera },\n        }));\n\n        for (const constraints of [...constraintsWithCamera, ...constraintsWithoutCamera]) {\n            try {\n                const stream = await navigator.mediaDevices.getUserMedia({ video: constraints, audio: false });\n                // Try to determine the facing mode from the stream, otherwise use a guess or 'environment' as\n                // default. Note that the guess is not always accurate as Safari returns cameras of different facing\n                // mode, even for exact facingMode constraints.\n                const facingMode = this._getFacingMode(stream)\n                    || (constraints.facingMode\n                        ? this._preferredCamera as QrScanner.FacingMode // a facing mode we were able to fulfill\n                        : (this._preferredCamera === 'environment'\n                            ? 'user' // switch as _preferredCamera was environment but we are not able to fulfill it\n                            : 'environment' // switch from unfulfilled user facingMode or default to environment\n                        )\n                    );\n                return { stream, facingMode };\n            } catch (e) {}\n        }\n\n        throw 'Camera not found.';\n    }\n\n    private async _restartVideoStream(): Promise<void> {\n        // Note that we always pause the stream and not only if !this._paused as even if this._paused === true, the\n        // stream might still be running, as it's by default only stopped after a delay of 300ms.\n        const wasPaused = this._paused;\n        const paused = await this.pause(true);\n        if (!paused || wasPaused || !this._active) return;\n        await this.start();\n    }\n\n    private static _stopVideoStream(stream : MediaStream): void {\n        for (const track of stream.getTracks()) {\n            track.stop(); //  note that this will also automatically turn the flashlight off\n            stream.removeTrack(track);\n        }\n    }\n\n    private _setVideoMirror(facingMode: QrScanner.FacingMode): void {\n        // in user facing mode mirror the video to make it easier for the user to position the QR code\n        const scaleFactor = facingMode === 'user'? -1 : 1;\n        this.$video.style.transform = 'scaleX(' + scaleFactor + ')';\n    }\n\n    private _getFacingMode(videoStream: MediaStream): QrScanner.FacingMode | null {\n        const videoTrack = videoStream.getVideoTracks()[0];\n        if (!videoTrack) return null; // unknown\n        // inspired by https://github.com/JodusNodus/react-qr-reader/blob/master/src/getDeviceId.js#L13\n        return /rear|back|environment/i.test(videoTrack.label)\n            ? 'environment'\n            : /front|user|face/i.test(videoTrack.label)\n                ? 'user'\n                : null; // unknown\n    }\n\n    private static _drawToCanvas(\n        image: HTMLImageElement | HTMLVideoElement | HTMLCanvasElement | OffscreenCanvas | ImageBitmap\n            | SVGImageElement,\n        scanRegion?: QrScanner.ScanRegion | null,\n        canvas?: HTMLCanvasElement | null,\n        disallowCanvasResizing= false,\n    ): [HTMLCanvasElement, CanvasRenderingContext2D] {\n        canvas = canvas || document.createElement('canvas');\n        const scanRegionX = scanRegion && scanRegion.x ? scanRegion.x : 0;\n        const scanRegionY = scanRegion && scanRegion.y ? scanRegion.y : 0;\n        const scanRegionWidth = scanRegion && scanRegion.width\n            ? scanRegion.width\n            : (image as HTMLVideoElement).videoWidth || image.width as number;\n        const scanRegionHeight = scanRegion && scanRegion.height\n            ? scanRegion.height\n            : (image as HTMLVideoElement).videoHeight || image.height as number;\n\n        if (!disallowCanvasResizing) {\n            const canvasWidth = scanRegion && scanRegion.downScaledWidth\n                ? scanRegion.downScaledWidth\n                : scanRegionWidth;\n            const canvasHeight = scanRegion && scanRegion.downScaledHeight\n                ? scanRegion.downScaledHeight\n                : scanRegionHeight;\n            // Setting the canvas width or height clears the canvas, even if the values didn't change, therefore only\n            // set them if they actually changed.\n            if (canvas.width !== canvasWidth) {\n                canvas.width = canvasWidth;\n            }\n            if (canvas.height !== canvasHeight) {\n                canvas.height = canvasHeight;\n            }\n        }\n\n        const context = canvas.getContext('2d', { alpha: false })!;\n        context.imageSmoothingEnabled = false; // gives less blurry images\n        context.drawImage(\n            image,\n            scanRegionX, scanRegionY, scanRegionWidth, scanRegionHeight,\n            0, 0, canvas.width, canvas.height,\n        );\n        return [canvas, context];\n    }\n\n    private static async _loadImage(\n        imageOrFileOrBlobOrUrl: HTMLImageElement | HTMLVideoElement | HTMLCanvasElement | OffscreenCanvas | ImageBitmap\n            | SVGImageElement | File | Blob | URL | String,\n    ): Promise<HTMLImageElement | HTMLVideoElement | HTMLCanvasElement | OffscreenCanvas | ImageBitmap\n        | SVGImageElement > {\n        if (imageOrFileOrBlobOrUrl instanceof Image) {\n            await QrScanner._awaitImageLoad(imageOrFileOrBlobOrUrl);\n            return imageOrFileOrBlobOrUrl;\n        } else if (imageOrFileOrBlobOrUrl instanceof HTMLVideoElement\n            || imageOrFileOrBlobOrUrl instanceof HTMLCanvasElement\n            || imageOrFileOrBlobOrUrl instanceof SVGImageElement\n            || 'OffscreenCanvas' in window && imageOrFileOrBlobOrUrl instanceof OffscreenCanvas\n            || 'ImageBitmap' in window && imageOrFileOrBlobOrUrl instanceof ImageBitmap) {\n            return imageOrFileOrBlobOrUrl;\n        } else if (imageOrFileOrBlobOrUrl instanceof File || imageOrFileOrBlobOrUrl instanceof Blob\n            || imageOrFileOrBlobOrUrl instanceof URL || typeof imageOrFileOrBlobOrUrl === 'string') {\n            const image = new Image();\n            if (imageOrFileOrBlobOrUrl instanceof File || imageOrFileOrBlobOrUrl instanceof Blob) {\n                image.src = URL.createObjectURL(imageOrFileOrBlobOrUrl);\n            } else {\n                image.src = imageOrFileOrBlobOrUrl.toString();\n            }\n            try {\n                await QrScanner._awaitImageLoad(image);\n                return image;\n            } finally {\n                if (imageOrFileOrBlobOrUrl instanceof File || imageOrFileOrBlobOrUrl instanceof Blob) {\n                    URL.revokeObjectURL(image.src);\n                }\n            }\n        } else {\n            throw 'Unsupported image type.';\n        }\n    }\n\n    private static async _awaitImageLoad(image: HTMLImageElement): Promise<void> {\n        if (image.complete && image.naturalWidth !== 0) return; // already loaded\n        await new Promise<void>((resolve, reject) => {\n            const listener = (event: ErrorEvent | Event) => {\n                image.removeEventListener('load', listener);\n                image.removeEventListener('error', listener);\n                if (event instanceof ErrorEvent) {\n                    reject('Image load error');\n                } else {\n                    resolve();\n                }\n            };\n            image.addEventListener('load', listener);\n            image.addEventListener('error', listener);\n        });\n    }\n\n    private static async _postWorkerMessage(\n        qrEngineOrQrEnginePromise: Worker | BarcodeDetector | Promise<Worker | BarcodeDetector>,\n        type: string,\n        data?: any,\n        transfer?: Transferable[],\n    ): Promise<number> {\n        return QrScanner._postWorkerMessageSync(await qrEngineOrQrEnginePromise, type, data, transfer);\n    }\n\n    // sync version of _postWorkerMessage without performance overhead of async functions\n    private static _postWorkerMessageSync(\n        qrEngine: Worker | BarcodeDetector,\n        type: string,\n        data?: any,\n        transfer?: Transferable[],\n    ): number {\n        if (!(qrEngine instanceof Worker)) return -1;\n        const id = QrScanner._workerMessageId++;\n        qrEngine.postMessage({\n            id,\n            type,\n            data,\n        }, transfer);\n        return id;\n    }\n}\n\ndeclare namespace QrScanner {\n    export interface ScanRegion {\n        x?: number;\n        y?: number;\n        width?: number;\n        height?: number;\n        downScaledWidth?: number;\n        downScaledHeight?: number;\n    }\n\n    export type FacingMode = 'environment' | 'user';\n    export type DeviceId = string;\n\n    export interface Camera {\n        id: DeviceId;\n        label: string;\n    }\n\n    export type InversionMode = 'original' | 'invert' | 'both';\n\n    export interface Point {\n        x: number;\n        y: number;\n    }\n\n    export interface ScanResult {\n        data: string;\n        // In clockwise order, starting at top left, but this might not be guaranteed in the future.\n        cornerPoints: QrScanner.Point[];\n    }\n}\n\n// simplified from https://wicg.github.io/shape-detection-api/#barcode-detection-api\ndeclare class BarcodeDetector {\n    constructor(options?: { formats: string[] });\n    static getSupportedFormats(): Promise<string[]>;\n    detect(image: ImageBitmapSource): Promise<Array<{ rawValue: string, cornerPoints: QrScanner.Point[] }>>;\n}\n\n// simplified from https://github.com/lukewarlow/user-agent-data-types/blob/master/index.d.ts\ndeclare global {\n    interface Navigator {\n        readonly userAgentData?: {\n            readonly platform: string;\n            readonly brands: Array<{\n                readonly brand: string;\n                readonly version: string;\n            }>;\n            getHighEntropyValues(hints: string[]): Promise<{\n                readonly architecture?: string;\n                readonly platformVersion?: string;\n            }>;\n        };\n    }\n}\n\nexport default QrScanner;\n"],"names":["QrScanner","constructor","video","onDecode","canvasSizeOrOnDecodeErrorOrOptions","canvasSizeOrCalculateScanRegion","preferredCamera","DEFAULT_CANVAS_SIZE","$video","$canvas","document","createElement","_onDecode","console","warn","_legacyOnDecode","_onDecodeError","options","onDecodeError","_calculateScanRegion","calculateScanRegion","_preferredCamera","_legacyCanvasSize","_maxScansPerSecond","maxScansPerSecond","_onPlay","bind","_onLoadedMetaData","_onVisibilityChange","_updateOverlay","disablePictureInPicture","playsInline","muted","shouldHideVideo","hidden","body","contains","appendChild","highlightScanRegion","highlightCodeOutline","$overlay","overlay","overlayStyle","position","display","pointerEvents","classList","add","gotExternalOverlay","innerHTML","firstElementChild","animate","transform","duration","iterations","Infinity","direction","easing","e","videoContainer","insertBefore","nextSibling","insertAdjacentHTML","$codeOutlineHighlight","lastElementChild","_scanRegion","requestAnimationFrame","videoStyle","style","setProperty","visibility","opacity","width","height","parentElement","removeChild","addEventListener","window","_qrEnginePromise","createQrEngine","workerPath","hasCamera","length","listCameras","requestLabels","navigator","mediaDevices","filter","device","openedStream","every","enumerateCameras","camera","label","getUserMedia","audio","map","i","id","deviceId","_stopVideoStream","hasFlash","stream","srcObject","MediaStream","_getCameraStream","getVideoTracks","getSettings","isFlashOn","_flashOn","toggleFlash","turnFlashOff","turnFlashOn","_destroyed","_active","_paused","applyConstraints","advanced","torch","_restartVideoStream","destroy","removeEventListener","stop","_postWorkerMessage","start","Error","location","protocol","play","facingMode","_setVideoMirror","catch","pause","stopStreamImmediately","stopStream","Promise","resolve","setTimeout","setCamera","facingModeOrDeviceId","scanImage","imageOrFileOrBlobOrUrl","scanRegionOrOptions","qrEngine","canvas","disallowCanvasResizing","alsoTryWithoutScanRegion","scanRegion","returnDetailedScanResult","image","canvasContext","all","_loadImage","_drawToCanvas","detailedScanResult","Worker","gotExternalEngine","_postWorkerMessageSync","qrEngineWorker","reject","timeout","onMessage","onError","expectedResponseId","event","data","clearTimeout","cornerPoints","_convertPoints","NO_QR_CODE_FOUND","error","imageData","buffer","race","scanResult","rawValue","message","test","errorMessage","_disableBarcodeDetector","setGrayscaleWeights","red","green","blue","useIntegerApproximation","setInversionMode","inversionMode","then","module","createWorker","BarcodeDetector","getSupportedFormats","includes","userAgentData","brands","some","brand","platform","getHighEntropyValues","architecture","platformVersion","parseInt","formats","_scanFrame","x","Math","round","videoWidth","scanRegionSize","y","videoHeight","downScaledWidth","downScaledHeight","videoObjectFit","videoScaledWidth","videoScaledHeight","elementWidth","elementHeight","videoAspectRatio","elementAspectRatio","min","videoY","lengthValue","parseFloat","endsWith","regionWidth","regionHeight","top","elementY","regionY","left","elementX","isVideoMirrored","videoX","regionX","points","point","scaleFactorX","offsetX","scaleFactorY","offsetY","paused","ended","requestVideoFrameCallback","readyState","timeSinceLastScan","minimumTimeBetweenScans","_lastScanTimestamp","Date","now","result","_codeOutlineHighlightRemovalTimeout","undefined","setAttribute","join","log","constraint","preferenceType","exact","constraints","wasPaused","track","removeTrack","_getFacingMode","videoStream","videoTrack","scanRegionWidth","scanRegionHeight","canvasWidth","canvasHeight","alpha","context","imageSmoothingEnabled","drawImage","scanRegionX","scanRegionY","Image","_awaitImageLoad","HTMLVideoElement","HTMLCanvasElement","SVGImageElement","OffscreenCanvas","ImageBitmap","File","Blob","URL","src","createObjectURL","toString","revokeObjectURL","complete","naturalWidth","listener","ErrorEvent","qrEngineOrQrEnginePromise","type","transfer","postMessage"],"mappings":";;;;SAAA,KAAMA,EAAN,CA0GIC,EAAAA,CAAAA,EAAAA,CAAAA,EAAAA,CAAAA,EAAAA,CAAAA,CAAAA;QAAAA,EACIC,EACAC,CAAAA,CACAC,EAWAC,EACAC,GA5Da,SAAA,GAAA,EAAA,UAAA,CAA4BN,CAAUO,CAAAA,MAAAA;QAAAA,IAAAA,CAAAA,OAC/C,SAAA,GAAA,YAAA,CAA8D;QAAA,IAAA,CAAA,OACrD,WAAA,GAAA;QAAA,IAAA,CAAA,IAAA,CAA6B,EACtC,WAAA,GAAA,CAAA;QAAA,IAAA,CAAA,IAAA,CAA6B,CAAC,CAO9B,GAAA,GAAA,IAAA,CAAA,OAAA,CADA,GAAA,IAAA,CAAA,OACA,GAFA,IAAA,CAAA,OAEA,GAHA,CAAA;QAAA,IAAA,CAAA,IAGA,CAHmB,CAAA,GAuDvB;QAAA,GAAKC,CAAAA,CAAAA,KAAL,CAAcN,CACd,GAAA,IAAKO,CAAAA,IAAAA,GAAL,CAAeC,QAASC,CAAAA,CAAAA;QAAAA,EAAT,GAAuB,QAAvB,CAEXP,IAAJ,EAAwF,KAAA,IAAA,CAAxF,GAA0C,CAAA,KAAOA,EAAjD,CAEI,CAAA,GAAA,IAAKQ,CAAAA,KAAAA,KAAAA,IAAAA,CAFT,CAEqBT,CAFrB,EAIQC,CAAJ,EAA0CC,CAA1C,EAA6EC,CAA7E,CACIO,OAAQC,CAAAA,IAAR,CAAa,2FAAA,QAAA,GAAb,CADJ,CASID,OAAQC,CAAAA,IAAR,CAAa,gKAGjB,IAAKC,CAAAA,KAHD,CAGJ,SAAA,GAAuBZ,CAhB3B;QAAA,IAAA,aAAA,OAAA,IAoBMC,IACA,CAAA,CACN;QAAA,IAAKY,CAAAA,cAAL,GAAsBC,CAAQC,CAAAA,aAA9B,IAAA,CAA8F,UAA9C,KAAA,MAAOd,CAAAA,CAAP,GAC1CA,CAD0C,GAE1C,IAAKY,CAAAA,cAFX,CAGA;QAAA,IAAKG,CAAAA,oBAAL,GAA4BF,CAAQG,CAAAA,mBAApC,IAAA,CAAqG,UAAzC,KAAA,MAAOf,CAAAA,CAAP,GACtDA,CADsD,GAEtD,IAAKc,CAAAA,oBAFX,CAGA;QAAA,IAAKE,CAAAA,gBAAL,GAAwBJ,CAAQX,CAAAA,eAAhC,IAAmDA,CAAnD,IAAsE,IAAKe,CAAAA,gBAC3E;QAAA,IAAKC,CAAAA,iBAAL,GAAuE,QAA9C,KAAA,MAAOlB,CAAAA,CAAP,GACnBA,CADmB,GAEwB,QAA3C,KAAA,MAAOC,CAAAA,CAAP,GACIA,CADJ,GAEI,IAAKiB,CAAAA,iBACf;QAAA,IAAKC,CAAAA,kBAAL,GAA0BN,CAAQO,CAAAA,iBAAlC,IAAuD,IAAKD,CAAAA,kBAE5D;QAAA,IAAKE,CAAAA,OAAL,GAAe,IAAKA,CAAAA,OAAQC,CAAAA,IAAb,CAAkB,IAAlB,CACf;QAAA,IAAKC,CAAAA,iBAAL,GAAyB,IAAKA,CAAAA,iBAAkBD,CAAAA,IAAvB,CAA4B,IAA5B,CACzB;QAAA,IAAKE,CAAAA,mBAAL,GAA2B,IAAKA,CAAAA,mBAAoBF,CAAAA,IAAzB,CAA8B,IAA9B,CAC3B;QAAA,IAAKG,CAAAA,cAAL,GAAsB,IAAKA,CAAAA,cAAeH,CAAAA,IAApB,CAAyB,IAAzB,CAGtBxB;QAAAA,CAAM4B,CAAAA,uBAAN,GAAgC,CAAA,CAIhC5B;QAAAA,CAAM6B,CAAAA,WAAN,GAAoB,CAAA,CAGpB7B;QAAAA,CAAM8B,CAAAA,KAAN,GAAc,CAAA,CAId;QAAA,IAAIC,IAAkB,CAAA,CAClB/B;QAAAA,CAAMgC,CAAAA,MAAV,IAAA,CACIhC,CAAMgC,CAAAA,MACN,GADe,CAAA,CACf,EAAAD,CAAA,GAAkB,CAAA,CAFtB,CAIKvB;QAAAA,QAASyB,CAAAA,IAAKC,CAAAA,QAAd,CAAuBlC,CAAvB,CAAL,IAAA,CACIQ,QAASyB,CAAAA,IAAKE,CAAAA,WAAd,CAA0BnC,CAA1B,CACA,EAAA+B,CAAA,GAAkB,CAAA,CAFtB;QAAA,IAAA,EAAA,aAMA;QAAA,IAAIhB,CAAQqB,CAAAA,mBAAZ,IAAmCrB,CAAQsB,CAAAA,oBAA3C,EAAiE;YAAA,IAAA,CAAA,CAClCtB,EAAAA,OAC3B;YAAA,IAAKuB,CAAAA,QAAL,GAAgBvB,CAAQwB,CAAAA,OAAxB,IAAmC/B,QAASC,CAAAA,aAAT,CAAuB,KAAvB;YAAA,IAAA,IAAA,CAAA,QAAA,CAAA,KAEnC+B;YAAAA,CAAaC,CAAAA,QAAb,GAAwB,UACxBD;YAAAA,CAAaE,CAAAA,OAAb,GAAuB,MACvBF;aAAaG,CAAAA,aAAb,GAA6B,MAC7B;YAAA,IAAKL,CAAAA,QAASM,CAAAA,SAAUC,CAAAA,GAAxB,CAA4B,uBAA5B,CACA;YAAA,IAAI,CAACC,CAAL,IAA2B/B,CAAQqB,CAAAA,mBAAnC,EAAwD;gBAGpD,IAAKE,CAAAA,QAASS,CAAAA,SAAd,GAA0B,uWAK1B;gBAAA,IAAI;oBACA,IAAKT,CAAAA,QAASU,CAAAA,iBAAmBC,CAAAA,OAAjC,CAAyC;wBAAEC,WAAW;4BAAC,YAAD;4BAAe,aAAf;;oBAAb,CAAzC,EAAuF;wBACnFC,UAAU,GADyE;wBAEnFC,YAAYC,QAFuE;wBAGnFC,WAAW,WAHwE;wBAInFC,QAAQ;oBAJ2E,CAAvF;gBADA,EAOF,OAAOC,CAAP,EAAU,CAAA;gBACZC,CAAeC,CAAAA,YAAf,CAA4B,IAAKpB,CAAAA,QAAjC,EAA2C,IAAKhC,CAAAA,MAAOqD,CAAAA,WAAvD;YAhBoD;YAkBpD5C,CAAQsB,CAAAA,oBAAZ,IAAA,CAEI,IAAKC,CAAAA,QAASsB,CAAAA,kBAAd,CACI,WADJ,EAEI,oOAFJ,CAMA,EAAA,IAAKC,CAAAA,qBAAL,GAA6B,IAAKvB,CAAAA,QAASwB,CAAAA,gBAR/C;QA1B6D;QAqCjE,IAAKC,CAAAA,WAAL,GAAmB,IAAK9C,CAAAA,oBAAL,CAA0BjB,CAA1B,CAEnBgE;QAAAA,qBAAA,CAAsB,EAAA;YAElB,IAAA,IAAA,OAAA,gBAAA,CAAA,EAC2B;YAAA,MAA3B,KAAIC,CAAWvB,CAAAA,OAAf,IAAA,CACI1C,CAAMkE,CAAAA,KAAMC,CAAAA,WAAZ,CAAwB,SAAxB,EAAmC,OAAnC,EAA4C,WAA5C,CACA,EAAApC,CAAA,GAAkB,CAAA,CAFtB,CAI8B;YAAA,SAA9B,KAAIkC,CAAWG,CAAAA,UAAf,IAAA,CACIpE,CAAMkE,CAAAA,KAAMC,CAAAA,WAAZ,CAAwB,YAAxB,EAAsC,SAAtC,EAAiD,WAAjD,CACA,EAAApC,CAAA,GAAkB,CAAA,CAFtB,CAIIA;YAAAA,CAAJ,IAAA,CAEIpB,OAAQC,CAAAA,IAAR,CAAa,yFAAb,CAUA,EATAZ,CAAMkE,CAAAA,KAAMG,CAAAA,OASZ,GATsB,GAStB,EARArE,CAAMkE,CAAAA,KAAMI,CAAAA,KAQZ,GARoB,GAQpB,EAPAtE,CAAMkE,CAAAA,KAAMK,CAAAA,MAOZ,GAPqB,GAOrB,EANI,IAAKjC,CAAAA,QAMT,IANqB,IAAKA,CAAAA,QAASkC,CAAAA,aAMnC,IALI,IAAKlC,CAAAA,QAASkC,CAAAA,aAAcC,CAAAA,WAA5B,CAAwC,IAAKnC,CAAAA,QAA7C,CAKJ,EAFA,OAAO,IAAKA,CAAAA,QAEZ,EAAA,OAAO,IAAKuB,CAAAA,qBAZhB,CAeI;YAAA,IAAKvB,CAAAA,QAAT,IACI,IAAKX,CAAAA,cAAL;QAAA,CA3BR,CA+BA3B;QAAAA,CAAM0E,CAAAA,gBAAN,CAAuB,MAAvB,EAA+B,IAAKnD,CAAAA,OAApC,CACAvB;QAAAA,CAAM0E,CAAAA,gBAAN,CAAuB,gBAAvB,EAAyC,IAAKjD,CAAAA,iBAA9C,CACAjB;QAAAA,QAASkE,CAAAA,gBAAT,CAA0B,kBAA1B,EAA8C,IAAKhD,CAAAA,mBAAnD,CACAiD;QAAAA,MAAOD,CAAAA,gBAAP,CAAwB,QAAxB,EAAkC,IAAK/C,CAAAA,cAAvC,CAEA;QAAA,IAAKiD,CAAAA,gBAAL,GAAwB9E,CAAU+E,CAAAA,cAAV;IAAA;IAlQjB,WAAA,WAAW,CAACC,CAAD,EAAA;QAClBnE,OAAQC,CAAAA,IAAR,CAAa,gIAAb;IAAA;IAISmE,aAAAA,SAAS,GAAA;QAClB,IAAI;YACA,OAAO,CAAC,CAAsCC,CAApC,MAAMlF,CAAUmF,CAAAA,WAAV,CAAsB,CAAA,CAAtB,CAA8BD,EAAAA;QAD9C,EAEF,OAAOxB,CAAP,EAAU;YACR,OAAO,CAAA;QADC;IAAA;IAKHyB,aAAAA,WAAW,CAACC,CAAA,GAAgB,CAAA,CAAjB,EAAA;QACpB,IAAI,CAACC,SAAUC,CAAAA,YAAf,EAA6B,OAAO,EAEpC;QAAA,IAAA,IAAA,UACoDC,CAAAA,MAAAA,UAAAA,YAAAA,CAAAA,gBAAAA,EAAAA,EAAAA,MAAAA,EAAQC,IAAAA,iBAAAA,EAAAA,IAAAA,CAD5D,EAOIC,CACJ;QAAA,IAAI;YACIL,CAAJ,IAAgDM,CAA1B,MAAMC,CAAA,EAAoBD,EAAAA,KAA3B,EAAkCE,CAAD,GAAY,CAACA,CAAOC,CAAAA,KAArD,CAArB,IAAA,CACIJ,CADJ,GACmB,MAAMJ,SAAUC,CAAAA,YAAaQ,CAAAA,YAAvB,CAAoC;gBAAEC,OAAO,CAAA,CAAT;gBAAgB7F,OAAO,CAAA;YAAvB,CAApC,CADzB;QADA,EAIF,OAAOwD,CAAP,EAAU,CAAA;QAKZ,IAAI;YACA,OAAkCsC,CAA1B,MAAML,CAAA,EAAoBK,EAAAA,GAA3B,CAA+B,CAACJ,CAAD,EAASK,CAAT,CAAA,EAAgB,CAAA;oBAClDC,IAAIN,CAAOO,CAAAA,QADuC;oBAElDN,OAAOD,CAAOC,CAAAA,KAAdA,IAAAA,CAA8B,CAAN,KAAAI,CAAA,GAAU,gBAAV,GAA6B,CAAA,OAAA,EAAUA,CAAV,GAAc,CAAd,EAArDJ;gBAFkD,CAAA,CAA/C;QADP,CAAJ,QAKU;YAEFJ,CAAJ,IAAA,CACI5E,OAAQC,CAAAA,IAAR,CAAa,sGAAb,CAEA,EAAAd,CAAUoG,CAAAA,gBAAV,CAA2BX,CAA3B,CAHJ;QAFM;IAAA;IA+NRY,MAAAA,QAAQ,GAAA;QACV,IAAIC,CACJ;YAAI;YACA,IAAI,IAAK9F,CAAAA,MAAO+F,CAAAA,SAAhB,EAA2B;gBACvB,IAAI,CAAA,CAAE,IAAK/F,CAAAA,MAAO+F,CAAAA,SAAd,WAAmCC,CAAAA,WAAnC,CAAJ,EAAqD,OAAO,CAAA,CAC5DF;gBAAAA,CAAA,GAAS,IAAK9F,CAAAA,MAAO+F,CAAAA;YAFE,CAA3B,IAIID,EAAAA,CAAA,GAAyCA,CAA/B,MAAM,IAAKG,CAAAA,gBAAL,EAAyBH,EAAAA,MAE7C;YAAA,OAAO,OAAP,EAAkBA,EAAAA,CAAOI,CAAAA,cAAP,EAAA,CAAwB,CAAxB,CAA2BC,CAAAA,WAA3B;QAPlB,EAQF,OAAOjD,CAAP,EAAU;YACR,OAAO,CAAA;QADC,CARZ,QAUU;YAEF4C,CAAJ,IAAcA,CAAd,KAAyB,IAAK9F,CAAAA,MAAO+F,CAAAA,SAArC,IAAA,CACI1F,OAAQC,CAAAA,IAAR,CAAa,kGAAb,CAEA,EAAAd,CAAUoG,CAAAA,gBAAV,CAA2BE,CAA3B,CAHJ;QAFM;IAAA;IAUdM,SAAS,GAAA;QACL,MAAO,CAAA,IAAKC,CAAAA,QAAAA;IAAAA;IAGVC,MAAAA,WAAW,GAAA;QACT,IAAKD,CAAAA,QAAT,GACI,MAAM,IAAKE,CAAAA,YAAL,EADV,GAGI,MAAM,IAAKC,CAAAA,WAAL;IAAA;IAIRA,MAAAA,WAAW,GAAA;QACb,IAASH,CAAL,IAAKA,CAAAA,QAAT,IAA0BI,CAAL,IAAKA,CAAAA,UAA1B,IAAA,CACA,IAAKJ,CAAAA,QACD,GADY,CAAA,CACZ,EAAC,IAAKK,CAAAA,OAAN,IAAsBC,CAAL,IAAKA,CAAAA,OAF1B,GAGA,IAAI;YACA,IAAI,CAAC,MAAM,IAAKd,CAAAA,QAAL,EAAX,EAA4B,MAAM,oBAAN;YAE5B,MAAO,IAAK7F,CAAAA,MAAO+F,CAAAA,SAA0BG,CAAAA,cAAtC,EAAA,CAAuD,CAAvD,CAA0DU,CAAAA,gBAA1D,CAA2E;gBAE9EC,UAAU;oBAAC;wBAAEC,OAAO,CAAA;oBAAT,CAAD;;YAFoE,CAA3E;QAHP,EAOF,OAAO5D,CAAP,EAAU;YAER,KADA,CAAA,IAAKmD,CAAAA,QACCnD,GADU,CAAA,CACVA,EAAAA,CAAN;QAFQ;IAAA;IAMVqD,MAAAA,YAAY,GAAA;QACT,IAAKF,CAAAA,QAAV,IAAA,CAIA,IAAKA,CAAAA,QACL,GADgB,CAAA,CAChB,EAAA,MAAM,IAAKU,CAAAA,mBAAL,EALN;IAAA;IAQJC,OAAO,GAAA;QACH,IAAKhH,CAAAA,MAAOiH,CAAAA,mBAAZ,CAAgC,gBAAhC,EAAkD,IAAK9F,CAAAA,iBAAvD,CACA;QAAA,IAAKnB,CAAAA,MAAOiH,CAAAA,mBAAZ,CAAgC,MAAhC,EAAwC,IAAKhG,CAAAA,OAA7C,CACAf;QAAAA,QAAS+G,CAAAA,mBAAT,CAA6B,kBAA7B,EAAiD,IAAK7F,CAAAA,mBAAtD,CACAiD;QAAAA,MAAO4C,CAAAA,mBAAP,CAA2B,QAA3B,EAAqC,IAAK5F,CAAAA,cAA1C,CAEA;QAAA,IAAKoF,CAAAA,UAAL,GAAkB,CAAA,CAClB;QAAA,IAAKJ,CAAAA,QAAL,GAAgB,CAAA,CAChB;QAAA,IAAKa,CAAAA,IAAL,EACA1H;QAAAA,CAAU2H,CAAAA,kBAAV,CAA6B,IAAK7C,CAAAA,gBAAlC,EAAoD,OAApD;IAAA;IAGE8C,MAAAA,KAAK,GAAA;QACP,IAAI,IAAKX,CAAAA,UAAT,EAAqB,KAAUY,CAAAA,KAAJ,CAAU,6DAAV,CAAN;QACrB,IAASX,CAAL,IAAKA,CAAAA,OAAT,IAAqB,IAAKC,CAAAA,OAA1B;YAQA,IANiC,QAMpBjF,KANT2C,MAAOiD,CAAAA,QAASC,CAAAA,QAMP7F,IAJTrB,OAAQC,CAAAA,IAAR,CAAa,4EAAb,CAISoB,EADb,IAAKgF,CAAAA,OACQhF,GADE,CAAA,CACFA,EAAAA,CAATxB,QAASwB,CAAAA,MAAb,EAEA,IADA,IAAKiF,CAAAA,OACWZ,GADD,CAAA,CACCA,EAAZ,IAAK/F,CAAAA,MAAO+F,CAAAA,SAAhB,EAEI,MAAM,IAAK/F,CAAAA,MAAOwH,CAAAA,IAAZ,EAFV,KAMA;iBAAA,IAAI;gBACA,IAAA,EAAM,QAAA1B,CAAAA,EAAQ,YAAA2B,CAAAA,EAAAA,GAAAA,MAAAA,IAAAA,CAAAA,gBAAAA,EACV;gBAAA,CAAC,IAAKf,CAAAA,OAAV,IAAqB,IAAKC,CAAAA,OAA1B,GAEInH,CAAUoG,CAAAA,gBAAV,CAA2BE,CAA3B,CAFJ,GAAA,CAKA,IAAK4B,CAAAA,eAAL,CAAqBD,CAArB,CAKA,EAJA,IAAKzH,CAAAA,MAAO+F,CAAAA,SAIZ,GAJwBD,CAIxB,EAHA,MAAM,IAAK9F,CAAAA,MAAOwH,CAAAA,IAAZ,EAGN,EAAI,IAAKnB,CAAAA,QAAT,IAAA,CACI,IAAKA,CAAAA,QACL,GADgB,CAAA,CAChB,EAAA,IAAKG,CAAAA,WAAL,EAAmBmB,CAAAA,KAAnB,CAAyB,EAAA,GAAA,CAAzB,CAFJ,CAVA;YAFA,EAgBF,OAAOzE,CAAP,EAAU;gBACR,IAASyD,CAAL,IAAKA,CAAAA,OAAT,EAEA,KADA,CAAA,IAAKD,CAAAA,OACCxD,GADS,CAAA,CACTA,EAAAA,CAAN;;QAHQ;IAAA;IAOhBgE,IAAI,GAAA;QACA,IAAKU,CAAAA,KAAL,EACA;QAAA,IAAKlB,CAAAA,OAAL,GAAe,CAAA;IAAA;IAGbkB,MAAAA,KAAK,CAACC,CAAA,GAAwB,CAAA,CAAzB,EAAA;QACP,IAAKlB,CAAAA,OAAL,GAAe,CAAA,CACf;QAAA,IAAI,CAAC,IAAKD,CAAAA,OAAV,EAAmB,OAAO,CAAA,CAC1B;QAAA,IAAK1G,CAAAA,MAAO4H,CAAAA,KAAZ,EAEI;QAAA,IAAK5F,CAAAA,QAAT,IAAA,CACI,IAAKA,CAAAA,QAAS4B,CAAAA,KAAMxB,CAAAA,OADxB,GACkC,MADlC,CAIA;QAAA,IAAA,IAAA;YACQ,IAAKpC,CAAAA,MAAO+F,CAAAA,SAAhB,WAAqCC,CAAAA,WAArC,IAAA,CAEIxG,CAAUoG,CAAAA,gBAAV,CAA2B,IAAK5F,CAAAA,MAAO+F,CAAAA,SAAvC,CACA,EAAA,IAAK/F,CAAAA,MAAO+F,CAAAA,SAAZ,GAAwB,IAH5B;QAAA,CAOJ;QAAA,IAAI8B,CAAJ,EAEI,MADAC,CAAAA,CAAA,EACO,EAAA,CAAA,CAGX;QAAA,MAAM,IAAIC,OAAJ,EAAaC,CAAD,GAAaC,UAAA,CAAWD,CAAX,EAAoB,GAApB,CAAzB,CACN;QAAA,IAAI,CAAC,IAAKrB,CAAAA,OAAV,EAAmB,OAAO,CAAA,CAC1BmB;QAAAA,CAAA,EACA;QAAA,OAAO,CAAA;IAAA;IAGLI,MAAAA,SAAS,CAACC,CAAD,EAAA;QACPA,CAAJ,KAA6B,IAAKtH,CAAAA,gBAAlC,IAAA,CACA,IAAKA,CAAAA,gBAEL,GAFwBsH,CAExB,EAAA,MAAM,IAAKpB,CAAAA,mBAAL,EAHN;IAAA;IA6BSqB,aAAAA,SAAS,CAClBC,CADkB,EAGlBC,CAHkB,EAYlBC,CAZkB,EAalBC,CAbkB,EAclBC,CAAA,GAAkC,CAAA,CAdhB,EAelBC,CAAA,GAAoC,CAAA,CAflB,EAAA;QAiBlB,IAAIC,CAAJ,EACIC,IAA2B,CAAA,CAC3BN;QAAAA,CAAJ,IAAA,CACI,YADJ,EACoBA,EAAAA,CADpB,IAEO,UAFP,EAEqBA,EAAAA,CAFrB,IAGO,QAHP,EAGmBA,EAAAA,CAHnB,IAIO,wBAJP,EAImCA,EAAAA,CAJnC,IAKO,0BALP,IAKqCA,CALrC,IAMO,0BANP,EAMqCA,EAAAA,CANrC,IAAA,CASIK,CAKA,GALaL,CAAoBK,CAAAA,UAKjC,EAJAJ,CAIA,GAJWD,CAAoBC,CAAAA,QAI/B,EAHAC,CAGA,GAHSF,CAAoBE,CAAAA,MAG7B,EAFAC,CAEA,GAFyBH,CAAoBG,CAAAA,sBAE7C,IAFuE,CAAA,CAEvE,EADAC,CACA,GAD2BJ,CAAoBI,CAAAA,wBAC/C,IAD2E,CAAA,CAC3E,EAAAE,CAAA,GAA2B,CAAA,CAd/B,IAeWN,CAAJ,IAA2BC,CAA3B,IAAuCC,CAAvC,IAAiDC,CAAjD,IAA2EC,CAA3E,GACHrI,OAAQC,CAAAA,IAAR,CAAa,kFAAb,CADG,GAQHD,OAAQC,CAAAA,IAAR,CAAa,wJAAb;QAAA,IAAA,CAAA,CAIsBiI,CAE1B;QAAA,IAAI;YACA,IAAIM,CAAJ,EAEIC,CACJ;YAAA,CAACP,CAAD,EAAWM,CAAX,CAAA,GAAoB,MAAMd,OAAQgB,CAAAA,GAAR,CAAY;gBAClCR,CADkC,IACtB/I,CAAU+E,CAAAA,cAAV,EADsB;gBAElC/E,CAAUwJ,CAAAA,UAAV,CAAqBX,CAArB,CAFkC;aAAZ,CAI1B;aAACG,CAAD,EAASM,CAAT,CAAA,GAA0BtJ,CAAUyJ,CAAAA,aAAV,CAAwBJ,CAAxB,EAA+BF,CAA/B,EAA2CH,CAA3C,EAAmDC,CAAnD,CAC1B;YAAA,IAAIS,CAEJ;YAAA,IAAIX,CAAJ,WAAwBY,CAAAA,MAAxB,EAAgC;gBAC5B,IAAA,IAAA,CACKC;gBAAAA,CAAL,IAEI5J,CAAU6J,CAAAA,sBAAV,CAAiCC,CAAjC,EAAiD,eAAjD,EAAkE,MAAlE,CAEJJ;gBAAAA,CAAA,GAAqB,MAAM,IAAInB,OAAJ,CAAY,CAACC,CAAD,EAAUuB,CAAV,CAAA;oBACnC,IAAIC,CAAJ,EACIC,CADJ,EAEIC,CAFJ,EAGIC,IAAqB,CAAC,CAC1BF;oBAAAA,CAAA,IAAaG,CAADH;wBACJG,CAAMC,CAAAA,IAAKnE,CAAAA,EAAf,KAAsBiE,CAAtB,IAAA,CAGAL,CAAerC,CAAAA,mBAAf,CAAmC,SAAnC,EAA8CwC,CAA9C,CAGA,EAFAH,CAAerC,CAAAA,mBAAf,CAAmC,OAAnC,EAA4CyC,CAA5C,CAEA,EADAI,YAAA,CAAaN,CAAb,CACA,EAAwB,IAAxB,KAAII,CAAMC,CAAAA,IAAKA,CAAAA,IAAf,GACI7B,CAAA,CAAQ;4BACJ6B,MAAMD,CAAMC,CAAAA,IAAKA,CAAAA,IADb;4BAEJE,cAAcvK,CAAUwK,CAAAA,cAAV,CAAyBJ,CAAMC,CAAAA,IAAKE,CAAAA,YAApC,EAAkDpB,CAAlD;wBAFV,CAAR,CADJ,GAMIY,CAAA,CAAO/J,CAAUyK,CAAAA,gBAAjB,CAZJ;oBAAA,CAeJP;oBAAAA,CAAA,IAAWQ,CAADR;wBACNJ,CAAerC,CAAAA,mBAAf,CAAmC,SAAnC,EAA8CwC,CAA9C,CACAH;wBAAAA,CAAerC,CAAAA,mBAAf,CAAmC,OAAnC,EAA4CyC,CAA5C,CACAI;wBAAAA,YAAA,CAAaN,CAAb,CAEAD;wBAAAA,CAAA,CAAO,iBAAP,GAAA,CAAA,oCAAA;oBAAA,CAEJD;oBAAAA,CAAelF,CAAAA,gBAAf,CAAgC,SAAhC,EAA2CqF,CAA3C,CACAH;oBAAAA,CAAelF,CAAAA,gBAAf,CAAgC,OAAhC,EAAyCsF,CAAzC,CACAF;oBAAAA,CAAA,GAAUvB,UAAA,CAAW,EAAA,EAAMyB,CAAA,CAAQ,SAAR,CAAjB,EAAqC,GAArC,CACV;oBAAA,IAAA,IAAA,EAAA,YAAA,CAAA,GAA8C,GAAGlB,EAAAA,KAAAA,EAAeA,EAAAA,MAAAA,CAChEmB;oBAAAA,CAAA,GAAqBnK,CAAU6J,CAAAA,sBAAV,CACjBC,CADiB,EAEjB,QAFiB,EAGjBa,CAHiB,EAIjB;wBAACA,CAAUN,CAAAA,IAAKO,CAAAA,MAAhB;qBAJiB;gBAAA,CAhCE;YANC,CAAhC,IA8CIlB,EAAAA,CAAA,GAAqB,MAAMnB,OAAQsC,CAAAA,IAAR,CAAa;gBACpC,IAAItC,OAAJ,CAAkC,CAACC,CAAD,EAAUuB,CAAV,CAAA,EAAqBlF,MAAO4D,CAAAA,UAAP,CACnD,EAAA,EAAMsB,CAAA,CAAO,wBAAP,CAD6C,EAEnD,GAFmD,CAAvD,CADoC;gBAKnC,CAAA,OAAA;oBACG,IAAI;wBACA,IAAA,CAAA,EAAA,GAAA,MAAA,EAAA,MAAA,CAAA,EACA;wBAAA,IAAI,CAACe,CAAL,EAAiB,KAAM9K,CAAAA,CAAUyK,CAAAA,gBAAhB;wBACjB,OAAO;4BACHJ,MAAMS,CAAWC,CAAAA,QADd;4BAEHR,cAAcvK,CAAUwK,CAAAA,cAAV,CAAyBM,CAAWP,CAAAA,YAApC,EAAkDpB,CAAlD;wBAFX;oBAHP,EAOF,OAAOzF,CAAP,EAAU;wBAAA,IAAA,CACcsH,CAAAA,OAAAA,IAAAA,CACtB;4BAAI,qCAAsCC,CAAAA,IAAtC,CAA2CC,CAA3C,CAAJ,EAWI,MAFAlL,CAAAA,CAAUmL,CAAAA,uBAEH,GAF6B,CAAA,CAE7B,EAAAnL,CAAU4I,CAAAA,SAAV,CAAoBC,CAApB,EAA4C;4BAC/CM,YAAAA,CAD+C;4BAE/CH,QAAAA,CAF+C;4BAG/CC,wBAAAA,CAH+C;4BAI/CC,0BAAAA;wBAJ+C,CAA5C,CAOX;wBAAA,MAAM,CAAA,eAAA,EAAkBgC,CAAlB,EAAN;oBApBQ;gBAAA,CARf,CAAD,EALoC;aAAb,CAsC/B;YAAA,MAAO9B,CAAAA,CAAA,GAA2BM,CAA3B,GAAgDA,CAAmBW,CAAAA;QA/F1E,EAgGF,OAAO3G,CAAP,EAAU;YACR,IAAI,CAACyF,CAAL,IAAmB,CAACD,CAApB,EAA8C,KAAMxF,CAAAA,CAAN;YAC9C,IAAA,IAAA,MAAA,EAAA,SAAA,CAAA,GAC0B;gBACtBqF,UAAAA,CADsB;gBACZC,QAAAA,CADY;gBACJC,wBAAAA;YADI,EAG1B;YAAA,MAAOG,CAAAA,CAAA,GAA2BM,CAA3B,GAAgDA,CAAmBW,CAAAA;QANlE,CAhGZ,QAuGU;YACDT,CAAL,IACI5J,CAAU2H,CAAAA,kBAAV,CAA6BoB,CAA7B,EAAwC,OAAxC;QAFE;IAAA;IAOdqC,mBAAmB,CAACC,CAAD,EAAcC,CAAd,EAA6BC,CAA7B,EAA2CC,CAAA,GAAmC,CAAA,CAA9E,EAAA;QAGfxL,CAAU2H,CAAAA,kBAAV,CACI,IAAK7C,CAAAA,gBADT,EAEI,kBAFJ,EAGI;YAAEuG,KAAAA,CAAF;YAAOC,OAAAA,CAAP;YAAcC,MAAAA,CAAd;YAAoBC,yBAAAA;QAApB,CAHJ;IAAA;IAOJC,gBAAgB,CAACC,CAAD,EAAA;QAGZ1L,CAAU2H,CAAAA,kBAAV,CAA6B,IAAK7C,CAAAA,gBAAlC,EAAoD,eAApD,EAAqE4G,CAArE;IAAA;IAMS3G,aAAAA,cAAc,CAACC,CAAD,EAAA;QACnBA,CAAJ,IACInE,OAAQC,CAAAA,IAAR,CAAa,qEAAb;QAAA,IAAA,IAAA,uJAAA,GAKC6K,CAAAA,CAAAA,CAAAA,IAAAA,CAAMC,CAAD,EAAYA,CAAOC,CAAAA,QAAAA;QAAP,IAOtB,CAAA,CAAA,CAAA,CAAI,CAAA,uBAAA,IAAA,EAAA,EAJG,iBAAA,CAIH,EAJwBhH,OAAAA,EAIxB,EAHGiH,YAAAA,GAAgBC,CAAAA,eAAAA,IAAAA,CAAAA,CAGnB,EAFiDC,CAA7C,EAAA,IAAMF,YAAAA,GAAgBC,CAAAA,eAAAA,EAAAA,EAAhB,EAAuCC,EAAAA,IAAAA,CAAAA,GAA9C,CAAuD,MAAA,GAAA,CAAvD,CAEH,CAAJ,CAAyB,GAAA,GAAOH;QAAAA,CAAA,EAOhC,CAAA,IAAA,UAAA,aAAA,IAWA;gBAAA,IATOI,CAAcC,CAAAA,MAAOC,CAAAA,IAArB,CAA0B,CAAC,EAAE,OAAAC,CAAF,EAAD,CAAA,EAAe,WAAYnB,CAAAA,IAAZ,CAAiBmB,CAAjB,CAAzC,CASP,IARO,UAAWnB,CAAAA,IAAX,CAAgBgB,CAAcI,CAAAA,QAA9B,CAQP,IAJO,MAAMJ,CAAcK,CAAAA,oBAAd,CAAmC;YAAC,cAAD;YAAiB,iBAAjB;SAAnC,CACJX,CAAAA,IADI,CACC,CAAC,EAAE,cAAAY,CAAF,EAAgB,iBAAAC,CAAhB,EAAD,CAAA,EACF,MAAOvB,CAAAA,IAAP,CAAYsB,CAAZ,IAA4B,KAA5B,CADE,IACuF,EADvF,IACoCE,QAAA,CAASD,CAAT,IAA4B,IAA5B,CAFrC,CAGJrE,CAAAA,KAHI,CAGE,EAAA,EAAM,CAAA,CAHR,CAIb,GAA0C0D,CAAA,EAA1C,GAEO,IAAIC,eAAJ,CAAoB;YAAEY,SAAS;gBAAC,SAAD;;QAAX,CAApB;IAAA;IAGHjL,OAAO,GAAA;QACX,IAAKwC,CAAAA,WAAL,GAAmB,IAAK9C,CAAAA,oBAAL,CAA0B,IAAKX,CAAAA,MAA/B,CACnB;QAAA,IAAKqB,CAAAA,cAAL,EACI;QAAA,IAAKW,CAAAA,QAAT,IAAA,CACI,IAAKA,CAAAA,QAAS4B,CAAAA,KAAMxB,CAAAA,OADxB,GACkC,EADlC,CAGA;QAAA,IAAK+J,CAAAA,UAAL;IAAA;IAGIhL,iBAAiB,GAAA;QACrB,IAAKsC,CAAAA,WAAL,GAAmB,IAAK9C,CAAAA,oBAAL,CAA0B,IAAKX,CAAAA,MAA/B,CACnB;YAAKqB,CAAAA,cAAL;IAAA;IAGID,mBAAmB,GAAA;QACnBlB,QAASwB,CAAAA,MAAb,GACI,IAAKkG,CAAAA,KAAL,EADJ,GAEW,IAAKlB,CAAAA,OAFhB,IAGI,IAAKU,CAAAA,KAAL;IAAA;IAIAzG,oBAAoB,CAACjB,CAAD,EAAA;QAGxB,IAAA,IAAA,KAAA,KAAA,CAAA,IAAA,IAAA,KAAA,GAAA,CAAA,EAAA,UAAA,EADmDA,EAAAA,WAAAA,EAEnD;QAAA,OAAO;YACH0M,GAAGC,IAAKC,CAAAA,KAAL,CAAA,CAAY5M,CAAM6M,CAAAA,UAAlB,GAA+BC,CAA/B,IAAiD,CAAjD,CADA;YAEHC,GAAGJ,IAAKC,CAAAA,KAAL,CAAA,CAAY5M,CAAMgN,CAAAA,WAAlB,GAAgCF,CAAhC,IAAkD,CAAlD,CAFA;YAGHxI,OAAOwI,CAHJ;YAIHvI,QAAQuI,CAJL;YAKHG,iBAAiB,IAAK7L,CAAAA,iBALnB;YAMH8L,kBAAkB,IAAK9L,CAAAA;QANpB;IAAA;IAUHO,cAAc,GAAA;QAClBqC,qBAAA,CAAsB,EAAA;YAGlB,IAAK,IAAK1B,CAAAA,QAAV,EAAA;gBACA,IAAA,IAAA,IAAA,CAAA,MAAA,EAAA,IAAA,EAAA,UAAA,EAAA,IAAA,EAAA,WAAA,EAAA,IAAA,EAAA,WAAA,EAAA,IAAA,EAAA,YAAA,EAAA,IAAA,EAAA,UAAA,iBAAA,EAAA,IAAA,OAAA,gBAAA,CAAA,EAAA,EAAA,IAAA,EAAA,SAAA,EAAA,IAAA,IAAA,CAAA,EAAA,IAAA,IAAA,CAcA;gBAAA,OAAQ6K,CAAR;oBACI,KAAK,MAAL;wBACI,IAAAC,IAAmBP,CACnB;wBAAA,IAAAQ,IAAoBL,CACpB;wBAAA,KACJ;oBAAA,KAAK,MAAL;wBACII,CAAA,GAAmBE,CACnBD;wBAAAA,CAAA,GAAoBE,CACpB;wBAAA,KACJ;oBAAA;wBACI,CAAuB,OAAnB,KAAAJ,CAAA,GACEK,CADF,GACqBC,CADrB,GAEED,CAFF,GAEqBC,CAFzB,IAAA,CAQIJ,CACA,GADoBE,CACpB,EAAAH,CAAA,GAAmBC,CAAnB,GAAuCG,CAT3C,IAAA,CAWIJ,CACA,GADmBE,CACnB,EAAAD,CAAA,GAAoBD,CAApB,GAAuCI,CAZ3C,CAcA,EAAuB,YAAvB,KAAIL,CAAJ,IAAA,CAEIC,CACA,GADmBT,IAAKe,CAAAA,GAAL,CAASN,CAAT,EAA2BP,CAA3B,CACnB,EAAAQ,CAAA,GAAoBV,IAAKe,CAAAA,GAAL,CAASL,CAAT,EAA4BL,CAA5B,CAHxB;gBAxBR;gBAkCA,IAAA,CAAA,GAAaW,EAAAA,GAAAA,EAAAA,cAAAA,CAAAA,KAAAA,CAAAA,IAA+C7H,CAAAA,GAAAA,CAAAA,CAAKd,GAAQe;oBACrE,MAAM6H,IAAcC,UAAA,CAAW7I,CAAX,CACpB;oBAAA,MAAOA,CAAAA,CAAO8I,CAAAA,QAAP,CAAgB,GAAhB,CAAA,GAAA,CACC/H,CAAD,GAAuCwH,CAAvC,GAAuDF,CAAvD,GAAKC,CAAL,GAAoBF,CADpB,IAC4EQ,CAD5E,GAC0F,GAD1F,GAEDA;gBAAAA;gBAAAA,IAAAA,IAAAA,CAAAA,WAAAA,CAAAA,KAAAA,IAAAA;gBAAAA,IAAAA,IAAAA,CAAAA,WAAAA,CAAAA,MAAAA,IAAAA;gBAAAA,IAAAA,IAAAA,CAAAA,WAAAA,CAAAA,CAAAA,IAAAA,CAMV;gBAAA,IAAA,IAAA,IAAA,CAAA,WAAA,CAAA,CAAA,IAAA;gBAAA,IAAA,IAAA,CAAA,QAAA,CAAA,KAGApL;gBAAAA,CAAa8B,CAAAA,KAAb,GAAqB,GAAGyJ,CAAH,GAAiBlB,CAAjB,GAA8BO,CAA9B,CAAA,EAAA,CACrB5K;gBAAAA,CAAa+B,CAAAA,MAAb,GAAsB,GAAGyJ,CAAH,GAAkBhB,CAAlB,GAAgCK,CAAhC,CAAA,EAAA,CACtB7K;gBAAAA,CAAayL,CAAAA,GAAb,GAAmB,GAAGC,CAAH,GAAcP,CAAd,GAAuBQ,CAAvB,GAAiCnB,CAAjC,GAA+CK,CAA/C,CAAA,EAAA,CAAA;gBAAA,IAAA,eAAA,IAAA,CAAA,EAAA,KAAA,CAAA,SAAA,CAEnB7K;gBAAAA,CAAa4L,CAAAA,IAAb,GAAoB,GAAGC,CAAH,GAAA,CACbC,CAAA,GAAkBhB,CAAlB,GAAiCiB,CAAjC,GAA0CnB,CAA1C,GAA6DmB,CADhD,IAAA,CAEbD,CAAA,GAAkBzB,CAAlB,GAA+B2B,CAA/B,GAAyCT,CAAzC,GAAuDS,CAF1C,IAEqD3B,CAFrD,GAEkEO,CAFlE,CAAA,EAAA,CAIpB5K;gBAAAA,CAAaU,CAAAA,SAAb,GAAyBlD,CAAMkE,CAAAA,KAAMhB,CAAAA;YAtErC;QAAA,CAHJ;IAAA;IA6EWoH,OAAAA,cAAc,CACzBmE,CADyB,EAEzBxF,CAFyB,EAAA;QAIzB,IAAI,CAACA,CAAL,EAAiB,MAAOwF,CAAAA,CACxB;QAAA,IAAA,IAAA,EAAA,CAAA,IAAA,CAAA,EAAA,IAAA,EAAA,CAAA,IAAA,CAAA,EAAA,IAAA,EAAA,KAAA,IAAA,EAAA,eAAA,GAGMxF,CAAW3E,CAAAA,KAAAA,GAAQ2E,CAAWgE,CAAAA,eAAAA,GAC9B;QAAA,IAAA,EAAA,MAAA,IAAA,EAAA,gBAAA,GAEAhE,CAAW1E,CAAAA,MAAAA,GAAS0E,CAAWiE,CAAAA,gBAAAA,GAC/B,CACN;QAAA,KAAK,IAAA,CAAL,IAAA,CAAA,CACIwB,CAAMhC,CAAAA,CACN,GADUgC,CAAMhC,CAAAA,CAChB,GADoBiC,CACpB,GADmCC,CACnC,EAAAF,CAAM3B,CAAAA,CAAN,GAAU2B,CAAM3B,CAAAA,CAAhB,GAAoB8B,CAApB,GAAmCC,CAEvC;QAAA,MAAOL,CAAAA;IAAAA;IAGHhC,UAAU,GAAA;QACV,CAAC,IAAKzF,CAAAA,OAAV,IAAqB,IAAK1G,CAAAA,MAAOyO,CAAAA,MAAjC,IAA2C,IAAKzO,CAAAA,MAAO0O,CAAAA,KAAvD,IASA,CAAA,6CAFM,IAAK1O,CAAAA,MAAO2O,CAAAA,yBAA0BzN,CAAAA,IAAtC,CAA2C,IAAKlB,CAAAA,MAAhD,IACA0D,qBACN,EAAa,OAAA;YACT,IAAI,CAAA,CAA0B,CAA1B,IAAA,IAAK1D,CAAAA,MAAO4O,CAAAA,UAAZ,CAAJ,EAAA;gBASA,IAAA,IAAA,KAAA,GAAA,KAAA,IAAA,CAAA,kBAAA,EAAA,IAAA,MAAA,IAAA,CAAA,kBAEIC;gBAAAA,CAAJ,GAAwBC,CAAxB,IACI,MAAM,IAAI/G,OAAJ,EAAaC,CAAD,GAAaC,UAAA,CAAWD,CAAX,EAAoB8G,CAApB,GAA8CD,CAA9C,CAAzB,CAGV;gBAAA,IAAKE,CAAAA,kBAAL,GAA0BC,IAAKC,CAAAA,GAAL,EAG1B;gBAAA,IAAI;oBACA,IAAAC,IAAS,MAAM1P,CAAU4I,CAAAA,SAAV,CAAoB,IAAKpI,CAAAA,MAAzB,EAAiC;wBAC5C2I,YAAY,IAAKlF,CAAAA,WAD2B;wBAE5C8E,UAAU,IAAKjE,CAAAA,gBAF6B;wBAG5CkE,QAAQ,IAAKvI,CAAAA;oBAH+B,CAAjC;gBADf,EAMF,OAAOiK,CAAP,EAAc;oBACZ,IAAI,CAAC,IAAKxD,CAAAA,OAAV,EAAmB,MACnB;oBAAA,IAAKlG,CAAAA,cAAL,CAAoB0J,CAApB;gBAFY;gBAKFS,CAAVnL,CAAUmL,CAAAA,uBAAd,IAA2C,MAAM,IAAKrG,CAAAA,gBAAtD,YAAkF6E,MAAlF,IAAA,CAEI,IAAK7E,CAAAA,gBAFT,GAE4B9E,CAAU+E,CAAAA,cAAV,EAF5B,CAKI2K;gBAAAA,CAAJ,GAAA,CACQ,IAAK9O,CAAAA,SAAT,GACI,IAAKA,CAAAA,SAAL,CAAe8O,CAAf,CADJ,GAEW,IAAK3O,CAAAA,eAFhB,IAGI,IAAKA,CAAAA,eAAL,CAAqB2O,CAAOrF,CAAAA,IAA5B,CAGJ,EAAI,IAAKtG,CAAAA,qBAAT,IAAA,CACIuG,YAAA,CAAa,IAAKqF,CAAAA,mCAAlB,CAWA,EAVA,IAAKA,CAAAA,mCAUL,GAV2CC,IAAAA,CAAAA,CAU3C,EATA,IAAK7L,CAAAA,qBAAsB8L,CAAAA,YAA3B,CACI,SADJ,EAEI,GAAG,IAAK5L,CAAAA,WAAY2I,CAAAA,CAApB,IAAyB,CAAzB,CAAA,CAAA,CAFJ,GAGU,GAAG,IAAK3I,CAAAA,WAAYgJ,CAAAA,CAApB,IAAyB,CAAzB,CAAA,CAAA,CAHV,GAIU,GAAG,IAAKhJ,CAAAA,WAAYO,CAAAA,KAApB,IAA6B,IAAKhE,CAAAA,MAAOuM,CAAAA,UAAzC,CAAA,CAAA,CAJV,GAKU,GAAG,IAAK9I,CAAAA,WAAYQ,CAAAA,MAApB,IAA8B,IAAKjE,CAAAA,MAAO0M,CAAAA,WAA1C,EALV,CASA,EAAA,IAAA,CAAA,qBAAA,CAAA,iBADQ2C,CAAAA,YAAR,CAAqB,QAArB,EAA+BH,CAAOnF,CAAAA,YAAavE,CAAAA,GAApB,CAAwB,CAAC,EAAC,GAAA4G,CAAD,EAAI,GAAAK,CAAJ,EAAD,CAAA,EAAY,GAAGL,CAAH,CAAA,CAAA,EAAQK,CAAR,EAApC,CAAiD6C,CAAAA,IAAjD,CAAsD,GAAtD,CAA/B,CACA,EAAA,IAAK/L,CAAAA,qBAAsBK,CAAAA,KAAMxB,CAAAA,OAAjC,GAA2C,EAZ/C,CAPJ,IAqBW,IAAKmB,CAAAA,qBArBhB,IAqByC,CAAC,IAAK4L,CAAAA,mCArB/C,IAAA,CAuBI,IAAKA,CAAAA,mCAvBT,GAuB+ClH,UAAA,CACvC,EAAA,EAAM,IAAK1E,CAAAA,qBAAuBK,CAAAA,KAAMxB,CAAAA,OAAxC,GAAkD,MADX,EAEvC,GAFuC,CAvB/C;YAlCA;YAKI,IAAK+J,CAAAA,UAAL;QAAA,CANR;IAAA;IAoEI3L,cAAc,CAAC0J,CAAD,EAAA;QAEdA,CAAJ,KAAc1K,CAAUyK,CAAAA,gBAAxB,IACA5J,OAAQkP,CAAAA,GAAR,CAAYrF,CAAZ;IAAA;IAGUjE,MAAAA,gBAAgB,GAAA;QAC1B,IAAI,CAACpB,SAAUC,CAAAA,YAAf,EAA6B,MAAM,mBAAN;QAE7B,IAAA,IAAA,uBAAA,IAAA,CAAA,IAAA,CAAA,gBAAA,IACM,eACA,UAFN,EAAA,IAAA;YAAA;gBAIId,OAAO;oBAAEoJ,KAAK;gBAAP;YAAA;YACR;gBACCpJ,OAAO;oBAAEoJ,KAAK;gBAAP;YADR;YAEA,CAAA;SAPH,EAAA,IAAA,EAAA,GAAA,EAQ0DoC,IAAAA,OAAAA,MAAAA,CAAAA,CAAAA,GAAiCA,GAAY;gBACnG,CAACC,CAAD,CAAA,EAAkB;oBAAEC,OAAO,IAAK7O,CAAAA;gBAAd;YADiF,GAIvG;QAAA,KAAK,IAAA,CAAL,IAAA;eAAA,EAAmD;eAAA;SAAnD,CACI,IAAI;YACA,IAAA,IAAA,MAAA,UAAA,YAAA,CAAA,YAAA,CAAA;gBAAyDnB,OAAOiQ;gBAAapK,OAAO,CAAA;YAAA,EAApF,EAAA,IAAA,IAAA,CAAA,cAAA,CAAA,MAAA,CAKQoK,CAAYlI,CAAAA,UAAZ,GACE,IAAK5G,CAAAA,gBADP,GAE6B,aAA1B,KAAA,IAAKA,CAAAA,gBAAL,GACG,MADH,GAEG,aAAA,CAGd;YAAA,OAAO;gBAAEiF,QAAAA,CAAF;gBAAU2B,YAAAA;YAAV;QAbP,EAcF,OAAOvE,CAAP,EAAU,CAAA;QAGhB,MAAM,mBAAN;IAAA;IAGU6D,MAAAA,mBAAmB,GAAA;QAG7B,IAAA,IAAA,IAAA,CAAA,OAAA;QAAA,MAAA,IAAA,CAAA,KAAA,CAAA,CAAA,EAEA,IAAe6I,CAAAA,CAAf,IAA6B,IAAKlJ,CAAAA,OAAlC,IACA,MAAM,IAAKU,CAAAA,KAAL;IAAA;IAGKxB,OAAAA,gBAAgB,CAACE,CAAD,EAAA;QAC3B,KAAK,IAAA,CAAL,IAAA,EAAA,SAAA,EAAA,CACI+J,CAAM3I,CAAAA,IAAN,EACA,EAAApB,CAAOgK,CAAAA,WAAP,CAAmBD,CAAnB;IAAA;IAIAnI,eAAe,CAACD,CAAD,EAAA;QAGnB,IAAKzH,CAAAA,MAAO4D,CAAAA,KAAMhB,CAAAA,SAAlB,GAA8B,SAA9B,GAAA,CAAA,WAAA,IAAA,CAAA,IAAA,CAAA,IAAwD;IAAA;IAGpDmN,cAAc,CAACC,CAAD,EAAA;QAElB,OAAA,CAAA,CAAA,GAAA,EAAA,cAAA,EAAA,CAAA,EAAA,IAEO,wBAAyBvF,CAAAA,IAAzB,CAA8BwF,CAAW5K,CAAAA,KAAzC,CAAA,GACD,aADC,GAED,kBAAmBoF,CAAAA,IAAnB,CAAwBwF,CAAW5K,CAAAA,KAAnC,CAAA,GACI,MADJ,GAEI,IANV,GAAwB;IAAA;IASb4D,OAAAA,aAAa,CACxBJ,CADwB,EAGxBF,CAHwB,EAIxBH,CAJwB,EAKxBC,CAAA,GAAwB,CAAA,CALA,EAAA;QAOxBD,CAAA,GAASA,CAAT,IAAmBtI,QAASC,CAAAA,aAAT,CAAuB,QAAvB,CACnB;QAAA,IAAA,IAAA,KAAA,EAAA,CAAA,GAAA,EAAA,CAAA,GAAA,CAAA,EAAA,IAAA,KAAA,EAAA,CAAA,GAAA,EAAA,CAAA,GAAA,CAAA,EAAA,IAAA,KAAA,EAAA,KAAA,GAGMwI,CAAW3E,CAAAA,KAAAA,GACV6E,CAA2B0D,CAAAA,UAAAA,IAAc1D,CAAM7E,CAAAA,KAJtD,EAAA,IAAA,KAAA,EAAA,MAAA,GAMM2E,CAAW1E,CAAAA,MAAAA,GACV4E,CAA2B6D,CAAAA,WAAAA,IAAe7D,CAAM5E,CAAAA,MAElDwE;QAAAA,CAAL,IAAA,CAAA,CAYI,GAAA,KAAA,EAAA,eAAA,GAVME,CAAWgE,CAAAA,eAAAA,GACXuD,CASN,EAAA,CAAA,GAAA,KAAA,EAAA,gBAAA,GAPMvH,CAAWiE,CAAAA,gBAAAA,GACXuD,CAMN,EAHI3H,CAAOxE,CAAAA,KAGX,KAHqBoM,CAGrB,IAAA,CAFI5H,CAAOxE,CAAAA,KAEX,GAFmBoM,CAEnB,GAAI5H,CAAOvE,CAAAA,MAAX,KAAsBoM,CAAtB,IAAA,CACI7H,CAAOvE,CAAAA,MADX,GACoBoM,CADpB,CAZJ;QAAA,IAAA,EAAA,UAAA,CAAA,MAiBsC;YAAEC,OAAO,CAAA;QAAT,EACtCC;QAAAA,CAAQC,CAAAA,qBAAR,GAAgC,CAAA,CAChCD;QAAAA,CAAQE,CAAAA,SAAR,CACI5H,CADJ,EAEI6H,CAFJ,EAEiBC,CAFjB,EAE8BT,CAF9B,EAE+CC,CAF/C,EAGI,CAHJ,EAGO,CAHP,EAGU3H,CAAOxE,CAAAA,KAHjB,EAGwBwE,CAAOvE,CAAAA,MAH/B,CAKA;QAAA,OAAO;YAACuE,CAAD;YAAS+H,CAAT;SAAA;IAAA;IAGUvH,aAAAA,UAAU,CAC3BX,CAD2B,EAAA;QAK3B,IAAIA,CAAJ,WAAsCuI,CAAAA,KAAtC,EAEI,MADA,CAAA,MAAMpR,CAAUqR,CAAAA,eAAV,CAA0BxI,CAA1B,CACCA,EAAAA,CACJ;QAAA,IAAIA,CAAJ,WAAsCyI,CAAAA,gBAAtC,IACAzI,CADA,WACkC0I,CAAAA,iBADlC,IAEA1I,CAFA,WAEkC2I,CAAAA,eAFlC,IAGA,iBAHA,EAGqB3M,EAAAA,MAHrB,IAG+BgE,CAH/B,WAGiE4I,CAAAA,eAHjE,IAIA,aAJA,EAIiB5M,EAAAA,MAJjB,IAI2BgE,CAJ3B,WAI6D6I,CAAAA,WAJ7D,EAKH,MAAO7I,CAAAA,CACJ;QAAA,IAAIA,CAAJ,YAAsC8I,IAAtC,IAA8C9I,CAA9C,WAAgF+I,CAAAA,IAAhF,IACA/I,CADA,WACkCgJ,CAAAA,GADlC,IAC2E,QAD3E,KACyC,MAAOhJ,CAAAA,CADhD,EACqF;YACxF,IAAA,IAAA,IAAA,KAEIQ;YAAAA,CAAMyI,CAAAA,GAAN,GADAjJ,CAAJ,WAAsC8I,CAAAA,IAAtC,IAA8C9I,CAA9C,WAAgF+I,CAAAA,IAAhF,GACgBC,GAAIE,CAAAA,eAAJ,CAAoBlJ,CAApB,CADhB,GAGgBA,CAAuBmJ,CAAAA,QAAvB,EAEhB;YAAA,IAAI;gBAEA,MADA,CAAA,MAAMhS,CAAUqR,CAAAA,eAAV,CAA0BhI,CAA1B,CACCA,EAAAA;YAFP,CAAJ,QAGU;gBACN,CAAIR,CAAJ,WAAsC8I,CAAAA,IAAtC,IAA8C9I,CAA9C,WAAgF+I,CAAAA,IAAhF,KACIC,GAAII,CAAAA,eAAJ,CAAoB5I,CAAMyI,CAAAA,GAA1B;YAFE;QAV8E,CADrF,IAiBH,EAAA,MAAM,yBAAN;IAAA;IAIaT,aAAAA,eAAe,CAAChI,CAAD,EAAA;QAC5BA,CAAM6I,CAAAA,QAAV,IAA6C,CAA7C,KAAsB7I,CAAM8I,CAAAA,YAA5B,IACA,MAAM,IAAI5J,OAAJ,CAAkB,CAACC,CAAD,EAAUuB,CAAV,CAAA;YACpB,IAAA,IAAA,CAAA;gBACIV,CAAM5B,CAAAA,mBAAN,CAA0B,MAA1B,EAAkC2K,CAAlC,CACA/I;gBAAAA,CAAM5B,CAAAA,mBAAN,CAA0B,OAA1B,EAAmC2K,CAAnC,CACIhI;gBAAAA,CAAJ,WAAqBiI,CAAAA,UAArB,GACItI,CAAA,CAAO,kBAAP,CADJ,GAGIvB,CAAA;YAAA,CAGRa;YAAAA,CAAMzE,CAAAA,gBAAN,CAAuB,MAAvB,EAA+BwN,CAA/B,CACA/I;YAAAA,CAAMzE,CAAAA,gBAAN,CAAuB,OAAvB,EAAgCwN,CAAhC;QAAA,CAXE;IAAA;IAeWzK,aAAAA,kBAAkB,CACnC2K,CADmC,EAEnCC,CAFmC,EAGnClI,CAHmC,EAInCmI,CAJmC,EAAA;QAMnC,MAAOxS,CAAAA,CAAU6J,CAAAA,sBAAV,CAAiC,MAAMyI,CAAvC,EAAkEC,CAAlE,EAAwElI,CAAxE,EAA8EmI,CAA9E;IAAA;IAII3I,OAAAA,sBAAsB,CACjCd,CADiC,EAEjCwJ,CAFiC,EAGjClI,CAHiC,EAIjCmI,CAJiC,EAAA;QAMjC,IAAI,CAAA,CAAEzJ,CAAF,WAAsBY,CAAAA,MAAtB,CAAJ,EAAmC,OAAO,CAAC,CAC3C;QAAA,IAAA,IAAA,EAAA,gBAAA,EACAZ;QAAAA,CAAS0J,CAAAA,WAAT,CAAqB;YACjBvM,IAAAA,CADiB;YAEjBqM,MAAAA,CAFiB;YAGjBlI,MAAAA;QAHiB,CAArB,EAIGmI,CAJH,CAKA;QAAA,MAAOtM,CAAAA;IAAAA;AAxiCf;AACoBlG,EAAAA,mBAAA,GAAsB,GACtBA;AAAAA,EAAAA,gBAAA,GAAmB,kBACpBA;AAAAA,EAAAA,uBAAA,GAA0B,CAAA,CAC1BA;AAAAA,EAAAA,gBAAA,GAAmB;uCAAA","ignoreList":[0],"debugId":null}}]
}